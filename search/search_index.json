{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"en/","text":"UTBULT DESIGN Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"UTBULT DESIGN"},{"location":"en/#utbult-design","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"UTBULT DESIGN"},{"location":"en/about_me/","text":"About Me","title":"About Me"},{"location":"en/about_me/#about-me","text":"","title":"About Me"},{"location":"en/hardware/","text":"","title":"Index"},{"location":"en/hardware/EmbeddedRust/","text":"Embedded Rust - An introduction Vad \u00e4r Rust? Rust is a modern systems programming language developed by the Mozilla Corporation. It is intended to be a language for highly concurrent and highly secure systems. It compiles to native code; hence, it is blazingly fast like C and C++. Tutorialspoint on Rust Vad \u00e4r d\u00e5 f\u00f6rdelen med Rust? Systems and application programming languages face two major problems - It is difficult to write secure code. - It is difficult to write multi-threaded code. Iden med Rust \u00e4r att ha ett programmeringsspr\u00e5k som prioriterar att utveckla snabba, h\u00e5rdvarun\u00e4ra program. Detta g\u00f6rs med concurrency , dvs att programmet best\u00e5r av olika delar som kan k\u00f6ras samtidigt. Rustup Tutorialspoint Rustup \u00e4r ett terminalbaserat verktyg f\u00f6r att hantera versioner av rustkompilatorn och de verktyg som kr\u00e4vs f\u00f6r att kompilera rustkod. N\u00e4r rustup installeras kommer ocks\u00e5 en kompilator f\u00f6r rust att h\u00e4nga med, kallad rustc . Rustup installation - Manjaro sudo pacman -S rustup Introduktion till rust H\u00e4r kommer en introduktion till rust. Om du k\u00e4nner att du har koll kan du skippa den. Annars om du k\u00e4nner dig relativt s\u00e4ker men vill ha en genomg\u00e5ng om \u00e4gandeskap kan du kolla [[#Exempel 8 - \u00c4gandeskap]] och [[#Exempel 9 - L\u00e5nande]]. Exempel 1 - Hello World Vi b\u00f6rjar med ett enkelt exempel. Vi ska skriva ett hello world program i rust och kompilerar det f\u00f6r att k\u00f6ras p\u00e5 din dator. B\u00f6rja med att skapa en mapp som heter exempel1-helloWorld mkdir exempel1-helloWorld cd exempel1-helloWorld D\u00e4r i vill vi skapa sourcefilen f\u00f6r hello world programmet touch helloWorld.rs Notera att fil\u00e4ndelsen f\u00f6r rust \u00e4r .rs Senare g\u00e5r vi igenom hur man anv\u00e4nder en IDE f\u00f6r att skriva, kompilera och k\u00f6ra rustkod i. Men f\u00f6r enkelhetens skull b\u00f6rjar vi med att anv\u00e4nda en textredigerare f\u00f6r att skriva koden i och en terminal f\u00f6r att kompilera och k\u00f6ra i. \u00d6ppna denna fil i en textredigerare. Jag rekommenderar Sublime Text f\u00f6r enkelhetens skull. D\u00e4r l\u00e4gger du till. fn main() { println!(\"Hello world!\"); }","title":"Embedded Rust - An introduction"},{"location":"en/hardware/EmbeddedRust/#embedded-rust-an-introduction","text":"","title":"Embedded Rust - An introduction"},{"location":"en/hardware/EmbeddedRust/#vad-ar-rust","text":"Rust is a modern systems programming language developed by the Mozilla Corporation. It is intended to be a language for highly concurrent and highly secure systems. It compiles to native code; hence, it is blazingly fast like C and C++. Tutorialspoint on Rust Vad \u00e4r d\u00e5 f\u00f6rdelen med Rust? Systems and application programming languages face two major problems - It is difficult to write secure code. - It is difficult to write multi-threaded code. Iden med Rust \u00e4r att ha ett programmeringsspr\u00e5k som prioriterar att utveckla snabba, h\u00e5rdvarun\u00e4ra program. Detta g\u00f6rs med concurrency , dvs att programmet best\u00e5r av olika delar som kan k\u00f6ras samtidigt.","title":"Vad \u00e4r Rust?"},{"location":"en/hardware/EmbeddedRust/#rustup","text":"Tutorialspoint Rustup \u00e4r ett terminalbaserat verktyg f\u00f6r att hantera versioner av rustkompilatorn och de verktyg som kr\u00e4vs f\u00f6r att kompilera rustkod. N\u00e4r rustup installeras kommer ocks\u00e5 en kompilator f\u00f6r rust att h\u00e4nga med, kallad rustc .","title":"Rustup"},{"location":"en/hardware/EmbeddedRust/#rustup-installation-manjaro","text":"sudo pacman -S rustup","title":"Rustup installation - Manjaro"},{"location":"en/hardware/EmbeddedRust/#introduktion-till-rust","text":"H\u00e4r kommer en introduktion till rust. Om du k\u00e4nner att du har koll kan du skippa den. Annars om du k\u00e4nner dig relativt s\u00e4ker men vill ha en genomg\u00e5ng om \u00e4gandeskap kan du kolla [[#Exempel 8 - \u00c4gandeskap]] och [[#Exempel 9 - L\u00e5nande]].","title":"Introduktion till rust"},{"location":"en/hardware/EmbeddedRust/#exempel-1-hello-world","text":"Vi b\u00f6rjar med ett enkelt exempel. Vi ska skriva ett hello world program i rust och kompilerar det f\u00f6r att k\u00f6ras p\u00e5 din dator. B\u00f6rja med att skapa en mapp som heter exempel1-helloWorld mkdir exempel1-helloWorld cd exempel1-helloWorld D\u00e4r i vill vi skapa sourcefilen f\u00f6r hello world programmet touch helloWorld.rs Notera att fil\u00e4ndelsen f\u00f6r rust \u00e4r .rs Senare g\u00e5r vi igenom hur man anv\u00e4nder en IDE f\u00f6r att skriva, kompilera och k\u00f6ra rustkod i. Men f\u00f6r enkelhetens skull b\u00f6rjar vi med att anv\u00e4nda en textredigerare f\u00f6r att skriva koden i och en terminal f\u00f6r att kompilera och k\u00f6ra i. \u00d6ppna denna fil i en textredigerare. Jag rekommenderar Sublime Text f\u00f6r enkelhetens skull. D\u00e4r l\u00e4gger du till. fn main() { println!(\"Hello world!\"); }","title":"Exempel 1 - Hello World"},{"location":"en/music/","text":"","title":"Index"},{"location":"en/music/RustSoundcard/","text":"Rust Soundcard","title":"Rust Soundcard"},{"location":"en/music/RustSoundcard/#rust-soundcard","text":"","title":"Rust Soundcard"},{"location":"en/music/TheDONG/","text":"","title":"TheDONG"},{"location":"en/software/","text":"","title":"Index"},{"location":"en/software/HomebreweryCoCTheme/","text":"Homebrewery Call of Cthulhu Theme Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Et odio pellentesque diam volutpat commodo sed. Erat pellentesque adipiscing commodo elit at imperdiet dui accumsan sit. Varius morbi enim nunc faucibus. Volutpat sed cras ornare arcu. In iaculis nunc sed augue lacus. Mattis aliquam faucibus purus in massa. Mollis aliquam ut porttitor leo a diam. Nulla aliquet porttitor lacus luctus. In pellentesque massa placerat duis ultricies lacus. Fringilla phasellus faucibus scelerisque eleifend donec pretium vulputate sapien nec. Nascetur ridiculus mus mauris vitae ultricies leo integer malesuada. Leo vel fringilla est ullamcorper. In vitae turpis massa sed elementum tempus egestas. Sagittis nisl rhoncus mattis rhoncus urna neque. Potenti nullam ac tortor vitae. Tellus integer feugiat scelerisque varius morbi enim nunc. Aenean vel elit scelerisque mauris pellentesque pulvinar pellentesque habitant. Pellentesque diam volutpat commodo sed egestas egestas. Quis eleifend quam adipiscing vitae proin. Porttitor rhoncus dolor purus non. Tincidunt ornare massa eget egestas purus. Ultrices vitae auctor eu augue. Risus pretium quam vulputate dignissim suspendisse in est ante. Pellentesque id nibh tortor id. Nunc sed augue lacus viverra vitae congue eu consequat. Volutpat est velit egestas dui id. Interdum posuere lorem ipsum dolor. Morbi tristique senectus et netus et. Sed enim ut sem viverra aliquet. Pretium lectus quam id leo. Consequat id porta nibh venenatis cras sed felis eget velit. Urna id volutpat lacus laoreet. In nibh mauris cursus mattis molestie a iaculis. Imperdiet massa tincidunt nunc pulvinar sapien et ligula. Sagittis vitae et leo duis ut. Adipiscing bibendum est ultricies integer quis auctor elit sed. Mattis nunc sed blandit libero volutpat sed cras ornare arcu. Arcu non odio euismod lacinia at quis. Viverra tellus in hac habitasse platea dictumst vestibulum rhoncus. Et pharetra pharetra massa massa ultricies. Cursus eget nunc scelerisque viverra mauris in aliquam. Nunc mattis enim ut tellus elementum sagittis vitae et leo. Tellus molestie nunc non blandit massa enim. Justo eget magna fermentum iaculis eu non diam phasellus. Enim tortor at auctor urna nunc id cursus metus. Ac felis donec et odio pellentesque diam. Ipsum suspendisse ultrices gravida dictum. Dui nunc mattis enim ut tellus elementum sagittis vitae. Amet commodo nulla facilisi nullam vehicula. Rhoncus mattis rhoncus urna neque. Ut ornare lectus sit amet est placerat in egestas erat. Diam quam nulla porttitor massa id neque aliquam vestibulum morbi. Facilisi cras fermentum odio eu feugiat pretium. Blandit massa enim nec dui nunc mattis enim ut tellus. Elementum sagittis vitae et leo duis. Eu facilisis sed odio morbi quis. Sit amet tellus cras adipiscing enim eu turpis egestas. Dolor purus non enim praesent elementum facilisis leo vel. Sit amet purus gravida quis blandit turpis cursus in. Varius quam quisque id diam. Orci a scelerisque purus semper eget duis at tellus. Justo donec enim diam vulputate ut pharetra sit. Id neque aliquam vestibulum morbi blandit cursus risus. Sagittis orci a scelerisque purus semper. Laoreet sit amet cursus sit amet dictum sit amet justo. Nec feugiat in fermentum posuere urna nec tincidunt praesent. Massa eget egestas purus viverra. In nisl nisi scelerisque eu ultrices vitae auctor eu augue. Posuere sollicitudin aliquam ultrices sagittis orci a scelerisque. Condimentum vitae sapien pellentesque habitant morbi tristique senectus et netus. In est ante in nibh mauris cursus mattis. At tellus at urna condimentum mattis pellentesque. Rhoncus mattis rhoncus urna neque viverra justo. Turpis egestas maecenas pharetra convallis posuere morbi. Ac turpis egestas maecenas pharetra convallis posuere morbi. Non arcu risus quis varius quam. Sit amet purus gravida quis blandit turpis cursus. Sed euismod nisi porta lorem mollis aliquam ut. Congue nisi vitae suscipit tellus mauris a. Sit amet nulla facilisi morbi. Ac odio tempor orci dapibus ultrices in iaculis nunc. Ultricies tristique nulla aliquet enim tortor at auctor urna. Parturient montes nascetur ridiculus mus. Pretium lectus quam id leo in vitae. Mattis aliquam faucibus purus in. Habitant morbi tristique senectus et. Consequat ac felis donec et odio pellentesque diam volutpat. Semper auctor neque vitae tempus quam pellentesque nec nam. Volutpat diam ut venenatis tellus in metus vulputate eu. A cras semper auctor neque vitae tempus quam pellentesque. Velit euismod in pellentesque massa placerat duis ultricies. Sed sed risus pretium quam vulputate dignissim. Mattis aliquam faucibus purus in massa tempor nec feugiat. Egestas integer eget aliquet nibh praesent tristique. Egestas diam in arcu cursus euismod. Pellentesque massa placerat duis ultricies. Viverra orci sagittis eu volutpat. Auctor neque vitae tempus quam pellentesque. Purus semper eget duis at tellus at urna condimentum mattis. At urna condimentum mattis pellentesque id nibh tortor. Suspendisse in est ante in nibh mauris cursus. Nisl nisi scelerisque eu ultrices vitae auctor. Ut tortor pretium viverra suspendisse potenti. Pharetra vel turpis nunc eget lorem dolor. Amet commodo nulla facilisi nullam vehicula ipsum a arcu. Vulputate sapien nec sagittis aliquam malesuada bibendum. Ultrices tincidunt arcu non sodales neque sodales ut etiam sit. Tristique nulla aliquet enim tortor. Elit ullamcorper dignissim cras tincidunt lobortis feugiat vivamus at. Lorem donec massa sapien faucibus. Scelerisque felis imperdiet proin fermentum leo. Nulla aliquet enim tortor at. Lacus vel facilisis volutpat est velit egestas dui id. Turpis egestas integer eget aliquet nibh praesent tristique magna sit. Nisl nunc mi ipsum faucibus vitae. Pretium aenean pharetra magna ac placerat. Dictum varius duis at consectetur lorem donec massa sapien faucibus. Sed libero enim sed faucibus turpis in. Sollicitudin tempor id eu nisl nunc mi ipsum faucibus vitae. Blandit volutpat maecenas volutpat blandit. Aliquam sem et tortor consequat id porta. Fermentum odio eu feugiat pretium nibh. Laoreet suspendisse interdum consectetur libero id faucibus nisl tincidunt eget. Laoreet sit amet cursus sit amet dictum sit amet justo. Purus viverra accumsan in nisl nisi scelerisque eu ultrices. Id semper risus in hendrerit gravida rutrum. Ornare aenean euismod elementum nisi quis eleifend quam. Maecenas sed enim ut sem viverra. Leo integer malesuada nunc vel risus commodo viverra maecenas. Mattis pellentesque id nibh tortor id aliquet lectus proin. Blandit aliquam etiam erat velit scelerisque in dictum non. Quam pellentesque nec nam aliquam. Ut lectus arcu bibendum at varius vel pharetra. Consectetur lorem donec massa sapien faucibus. Nullam vehicula ipsum a arcu cursus vitae. At ultrices mi tempus imperdiet nulla malesuada. Pulvinar pellentesque habitant morbi tristique. Vel pretium lectus quam id leo. Integer enim neque volutpat ac. Condimentum mattis pellentesque id nibh tortor id aliquet lectus. Tristique magna sit amet purus gravida. Amet cursus sit amet dictum sit amet justo donec enim. Velit aliquet sagittis id consectetur purus ut faucibus. Ipsum suspendisse ultrices gravida dictum fusce ut placerat orci. Aliquam ut porttitor leo a diam sollicitudin tempor id eu. Elementum pulvinar etiam non quam lacus suspendisse. Vitae aliquet nec ullamcorper sit amet risus nullam eget. Venenatis lectus magna fringilla urna porttitor rhoncus dolor purus. Blandit cursus risus at ultrices mi. Auctor neque vitae tempus quam pellentesque nec nam aliquam. Tristique risus nec feugiat in fermentum posuere urna nec tincidunt. A arcu cursus vitae congue mauris rhoncus aenean. Arcu ac tortor dignissim convallis aenean et tortor at risus. Cras tincidunt lobortis feugiat vivamus at augue eget arcu dictum. Enim lobortis scelerisque fermentum dui faucibus in ornare quam. Eget duis at tellus at. Etiam tempor orci eu lobortis elementum nibh. Lorem ipsum dolor sit amet consectetur adipiscing elit pellentesque. Tortor aliquam nulla facilisi cras fermentum odio eu feugiat. Tincidunt tortor aliquam nulla facilisi cras fermentum odio eu. Tincidunt augue interdum velit euismod in pellentesque massa placerat duis. Accumsan tortor posuere ac ut consequat semper viverra nam. Ante in nibh mauris cursus mattis molestie a iaculis at. Vivamus at augue eget arcu dictum. Penatibus et magnis dis parturient montes nascetur ridiculus mus. Gravida arcu ac tortor dignissim convallis aenean et tortor at. In mollis nunc sed id semper risus in hendrerit gravida. Ut lectus arcu bibendum at varius. Tristique magna sit amet purus. Lectus urna duis convallis convallis tellus id interdum velit. Est sit amet facilisis magna. Lectus sit amet est placerat in egestas. Sit amet est placerat in egestas erat. Cras adipiscing enim eu turpis. Mattis nunc sed blandit libero volutpat sed cras. Orci dapibus ultrices in iaculis nunc sed. Mi eget mauris pharetra et ultrices neque ornare. Lacinia quis vel eros donec ac odio. Diam vulputate ut pharetra sit amet aliquam id diam. Faucibus interdum posuere lorem ipsum dolor. Cum sociis natoque penatibus et. Eget arcu dictum varius duis at consectetur lorem donec. Vel risus commodo viverra maecenas accumsan lacus vel. Viverra nam libero justo laoreet sit amet cursus sit amet. Lorem ipsum dolor sit amet consectetur adipiscing elit pellentesque habitant. Netus et malesuada fames ac. Ut tortor pretium viverra suspendisse potenti nullam ac. Pellentesque habitant morbi tristique senectus et netus et malesuada fames. Libero id faucibus nisl tincidunt eget nullam. Quis imperdiet massa tincidunt nunc pulvinar sapien et. Elit eget gravida cum sociis natoque penatibus et. Turpis in eu mi bibendum neque egestas congue quisque egestas. Etiam tempor orci eu lobortis elementum. Urna condimentum mattis pellentesque id nibh. Consectetur adipiscing elit pellentesque habitant morbi. Pellentesque nec nam aliquam sem et tortor consequat id porta. Mauris cursus mattis molestie a iaculis at erat. Neque gravida in fermentum et sollicitudin ac. Sit amet justo donec enim diam vulputate ut. Nullam non nisi est sit amet facilisis. Euismod elementum nisi quis eleifend quam adipiscing. Gravida rutrum quisque non tellus. Interdum varius sit amet mattis. Lectus magna fringilla urna porttitor rhoncus dolor. Sed elementum tempus egestas sed. Nullam eget felis eget nunc lobortis. Imperdiet dui accumsan sit amet nulla facilisi morbi tempus. Eros donec ac odio tempor orci dapibus. Pulvinar pellentesque habitant morbi tristique. Bibendum ut tristique et egestas quis ipsum suspendisse ultrices gravida. Nulla facilisi etiam dignissim diam quis enim. Massa eget egestas purus viverra accumsan in nisl. Volutpat maecenas volutpat blandit aliquam etiam. Eget duis at tellus at. Vestibulum rhoncus est pellentesque elit ullamcorper dignissim cras tincidunt. Nibh ipsum consequat nisl vel pretium lectus quam. Vitae turpis massa sed elementum tempus egestas. Sit amet massa vitae tortor condimentum lacinia. Interdum posuere lorem ipsum dolor sit amet. Ac feugiat sed lectus vestibulum. Tempus iaculis urna id volutpat lacus laoreet non. Blandit aliquam etiam erat velit. In fermentum et sollicitudin ac. Bibendum neque egestas congue quisque egestas diam. Sed euismod nisi porta lorem mollis aliquam. Tempus egestas sed sed risus pretium quam vulputate. Vitae aliquet nec ullamcorper sit amet risus nullam. Mi tempus imperdiet nulla malesuada pellentesque elit eget gravida cum. Rhoncus mattis rhoncus urna neque. Est ante in nibh mauris cursus. Et sollicitudin ac orci phasellus egestas. Diam volutpat commodo sed egestas egestas fringilla phasellus faucibus scelerisque. Ante metus dictum at tempor commodo ullamcorper. Risus feugiat in ante metus dictum at tempor. Lacus sed turpis tincidunt id aliquet risus feugiat in ante. Malesuada fames ac turpis egestas. Id cursus metus aliquam eleifend mi in nulla posuere sollicitudin. Sed felis eget velit aliquet sagittis. Elit eget gravida cum sociis natoque penatibus et. Neque sodales ut etiam sit amet nisl purus in mollis. Molestie at elementum eu facilisis sed odio morbi quis. Euismod quis viverra nibh cras pulvinar mattis nunc. Duis tristique sollicitudin nibh sit amet commodo nulla facilisi. Ut faucibus pulvinar elementum integer enim neque volutpat. Massa id neque aliquam vestibulum morbi blandit. Fringilla urna porttitor rhoncus dolor purus non enim praesent elementum. Massa tincidunt dui ut ornare lectus sit amet est. Senectus et netus et malesuada fames ac turpis. Rutrum tellus pellentesque eu tincidunt tortor aliquam. Nec ullamcorper sit amet risus nullam eget felis. Tincidunt arcu non sodales neque sodales. Dui vivamus arcu felis bibendum ut tristique et egestas quis. Tortor consequat id porta nibh venenatis cras sed felis eget. Consequat mauris nunc congue nisi vitae suscipit tellus. Sed ullamcorper morbi tincidunt ornare massa eget egestas purus. Consequat mauris nunc congue nisi vitae. Odio pellentesque diam volutpat commodo sed egestas egestas fringilla. Volutpat blandit aliquam etiam erat velit scelerisque in dictum non. Pulvinar pellentesque habitant morbi tristique senectus et netus et. Lectus arcu bibendum at varius. Mauris in aliquam sem fringilla ut morbi tincidunt. Sit amet consectetur adipiscing elit duis tristique sollicitudin nibh. Condimentum vitae sapien pellentesque habitant morbi. Consequat interdum varius sit amet mattis vulputate enim nulla aliquet. Tempus iaculis urna id volutpat lacus laoreet non. Ac turpis egestas maecenas pharetra convallis posuere morbi leo urna. Quisque non tellus orci ac auctor augue. Aliquet porttitor lacus luctus accumsan tortor posuere. Maecenas volutpat blandit aliquam etiam erat velit scelerisque in. Feugiat nibh sed pulvinar proin. Id ornare arcu odio ut sem nulla pharetra diam. Venenatis cras sed felis eget velit. Et malesuada fames ac turpis egestas integer eget aliquet nibh. Sed egestas egestas fringilla phasellus faucibus scelerisque eleifend. Iaculis at erat pellentesque adipiscing commodo. Consequat nisl vel pretium lectus quam id leo in. Elementum facilisis leo vel fringilla est. Massa sed elementum tempus egestas sed sed risus pretium. Tincidunt praesent semper feugiat nibh sed pulvinar proin gravida. Phasellus vestibulum lorem sed risus ultricies tristique nulla aliquet enim. Elit duis tristique sollicitudin nibh sit amet commodo nulla. Purus sit amet luctus venenatis lectus magna fringilla. Pharetra pharetra massa massa ultricies. Quisque egestas diam in arcu cursus. Ac orci phasellus egestas tellus. Sociis natoque penatibus et magnis. Et egestas quis ipsum suspendisse ultrices gravida dictum fusce. Eget magna fermentum iaculis eu non diam phasellus vestibulum lorem. Pellentesque elit eget gravida cum sociis natoque penatibus et magnis. Accumsan sit amet nulla facilisi morbi tempus. Odio facilisis mauris sit amet massa vitae tortor condimentum. Enim ut tellus elementum sagittis vitae et leo. Facilisis magna etiam tempor orci eu lobortis elementum nibh. Tempus iaculis urna id volutpat lacus laoreet non curabitur gravida. Sed faucibus turpis in eu mi bibendum. Venenatis urna cursus eget nunc scelerisque. Praesent semper feugiat nibh sed. Nulla aliquet enim tortor at auctor. Donec adipiscing tristique risus nec feugiat in fermentum posuere urna. Sagittis vitae et leo duis ut diam quam nulla porttitor. Auctor urna nunc id cursus metus aliquam eleifend mi. Nullam non nisi est sit amet facilisis magna. Scelerisque eleifend donec pretium vulputate sapien nec sagittis. Purus gravida quis blandit turpis cursus in. Placerat in egestas erat imperdiet sed. Nisl nunc mi ipsum faucibus vitae. Dui faucibus in ornare quam viverra orci sagittis. Ultrices tincidunt arcu non sodales neque sodales. Neque viverra justo nec ultrices dui sapien. Malesuada fames ac turpis egestas sed tempus urna et pharetra. Varius vel pharetra vel turpis nunc eget lorem. Mi proin sed libero enim. Risus nec feugiat in fermentum posuere urna. Dignissim diam quis enim lobortis scelerisque. Sem nulla pharetra diam sit amet nisl. Ullamcorper malesuada proin libero nunc consequat. Hendrerit gravida rutrum quisque non tellus. Sit amet justo donec enim diam vulputate ut. Cras semper auctor neque vitae tempus quam. Ultrices neque ornare aenean euismod elementum nisi quis eleifend. Vitae tortor condimentum lacinia quis vel eros donec.","title":"Homebrewery Call of Cthulhu Theme"},{"location":"en/software/HomebreweryCoCTheme/#homebrewery-call-of-cthulhu-theme","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Et odio pellentesque diam volutpat commodo sed. Erat pellentesque adipiscing commodo elit at imperdiet dui accumsan sit. Varius morbi enim nunc faucibus. Volutpat sed cras ornare arcu. In iaculis nunc sed augue lacus. Mattis aliquam faucibus purus in massa. Mollis aliquam ut porttitor leo a diam. Nulla aliquet porttitor lacus luctus. In pellentesque massa placerat duis ultricies lacus. Fringilla phasellus faucibus scelerisque eleifend donec pretium vulputate sapien nec. Nascetur ridiculus mus mauris vitae ultricies leo integer malesuada. Leo vel fringilla est ullamcorper. In vitae turpis massa sed elementum tempus egestas.","title":"Homebrewery Call of Cthulhu Theme"},{"location":"en/software/HomebreweryCoCTheme/#sagittis-nisl-rhoncus","text":"mattis rhoncus urna neque. Potenti nullam ac tortor vitae. Tellus integer feugiat scelerisque varius morbi enim nunc. Aenean vel elit scelerisque mauris pellentesque pulvinar pellentesque habitant. Pellentesque diam volutpat commodo sed egestas egestas. Quis eleifend quam adipiscing vitae proin. Porttitor rhoncus dolor purus non. Tincidunt ornare massa eget egestas purus. Ultrices vitae auctor eu augue. Risus pretium quam vulputate dignissim suspendisse in est ante. Pellentesque id nibh tortor id. Nunc sed augue lacus viverra vitae congue eu consequat. Volutpat est velit egestas dui id. Interdum posuere lorem ipsum dolor. Morbi tristique senectus et netus et. Sed enim ut sem viverra aliquet. Pretium lectus quam id leo. Consequat id porta nibh venenatis cras sed felis eget velit. Urna id volutpat lacus laoreet. In nibh mauris cursus mattis molestie a iaculis. Imperdiet massa tincidunt nunc pulvinar sapien et ligula. Sagittis vitae et leo duis ut. Adipiscing bibendum est ultricies integer quis auctor elit sed. Mattis nunc sed blandit libero volutpat sed cras ornare arcu. Arcu non odio euismod lacinia at quis. Viverra tellus in hac habitasse platea dictumst vestibulum rhoncus. Et pharetra pharetra massa massa ultricies. Cursus eget nunc scelerisque viverra mauris in aliquam. Nunc mattis enim ut tellus elementum sagittis vitae et leo. Tellus molestie nunc non blandit massa enim. Justo eget magna fermentum iaculis eu non diam phasellus. Enim tortor at auctor urna nunc id cursus metus. Ac felis donec et odio pellentesque diam. Ipsum suspendisse ultrices gravida dictum. Dui nunc mattis enim ut tellus elementum sagittis vitae. Amet commodo nulla facilisi nullam vehicula. Rhoncus mattis rhoncus urna neque. Ut ornare lectus sit amet est placerat in egestas erat.","title":"Sagittis nisl rhoncus"},{"location":"en/software/HomebreweryCoCTheme/#diam-quam","text":"nulla porttitor massa id neque aliquam vestibulum morbi. Facilisi cras fermentum odio eu feugiat pretium. Blandit massa enim nec dui nunc mattis enim ut tellus. Elementum sagittis vitae et leo duis. Eu facilisis sed odio morbi quis. Sit amet tellus cras adipiscing enim eu turpis egestas. Dolor purus non enim praesent elementum facilisis leo vel. Sit amet purus gravida quis blandit turpis cursus in. Varius quam quisque id diam. Orci a scelerisque purus semper eget duis at tellus. Justo donec enim diam vulputate ut pharetra sit. Id neque aliquam vestibulum morbi blandit cursus risus. Sagittis orci a scelerisque purus semper. Laoreet sit amet cursus sit amet dictum sit amet justo. Nec feugiat in fermentum posuere urna nec tincidunt praesent. Massa eget egestas purus viverra. In nisl nisi scelerisque eu ultrices vitae auctor eu augue. Posuere sollicitudin aliquam ultrices sagittis orci a scelerisque. Condimentum vitae sapien pellentesque habitant morbi tristique senectus et netus. In est ante in nibh mauris cursus mattis. At tellus at urna condimentum mattis pellentesque. Rhoncus mattis rhoncus urna neque viverra justo. Turpis egestas maecenas pharetra convallis posuere morbi. Ac turpis egestas maecenas pharetra convallis posuere morbi.","title":"Diam quam"},{"location":"en/software/HomebreweryCoCTheme/#non-arcu-risus","text":"quis varius quam. Sit amet purus gravida quis blandit turpis cursus. Sed euismod nisi porta lorem mollis aliquam ut. Congue nisi vitae suscipit tellus mauris a. Sit amet nulla facilisi morbi. Ac odio tempor orci dapibus ultrices in iaculis nunc. Ultricies tristique nulla aliquet enim tortor at auctor urna. Parturient montes nascetur ridiculus mus. Pretium lectus quam id leo in vitae. Mattis aliquam faucibus purus in. Habitant morbi tristique senectus et. Consequat ac felis donec et odio pellentesque diam volutpat. Semper auctor neque vitae tempus quam pellentesque nec nam. Volutpat diam ut venenatis tellus in metus vulputate eu. A cras semper auctor neque vitae tempus quam pellentesque.","title":"Non arcu risus"},{"location":"en/software/HomebreweryCoCTheme/#velit-euismod","text":"in pellentesque massa placerat duis ultricies. Sed sed risus pretium quam vulputate dignissim. Mattis aliquam faucibus purus in massa tempor nec feugiat. Egestas integer eget aliquet nibh praesent tristique. Egestas diam in arcu cursus euismod. Pellentesque massa placerat duis ultricies. Viverra orci sagittis eu volutpat. Auctor neque vitae tempus quam pellentesque. Purus semper eget duis at tellus at urna condimentum mattis. At urna condimentum mattis pellentesque id nibh tortor. Suspendisse in est ante in nibh mauris cursus. Nisl nisi scelerisque eu ultrices vitae auctor. Ut tortor pretium viverra suspendisse potenti. Pharetra vel turpis nunc eget lorem dolor. Amet commodo nulla facilisi nullam vehicula ipsum a arcu. Vulputate sapien nec sagittis aliquam malesuada bibendum.","title":"Velit euismod"},{"location":"en/software/HomebreweryCoCTheme/#ultrices-tincidunt","text":"arcu non sodales neque sodales ut etiam sit. Tristique nulla aliquet enim tortor. Elit ullamcorper dignissim cras tincidunt lobortis feugiat vivamus at. Lorem donec massa sapien faucibus. Scelerisque felis imperdiet proin fermentum leo. Nulla aliquet enim tortor at. Lacus vel facilisis volutpat est velit egestas dui id. Turpis egestas integer eget aliquet nibh praesent tristique magna sit. Nisl nunc mi ipsum faucibus vitae. Pretium aenean pharetra magna ac placerat. Dictum varius duis at consectetur lorem donec massa sapien faucibus. Sed libero enim sed faucibus turpis in. Sollicitudin tempor id eu nisl nunc mi ipsum faucibus vitae. Blandit volutpat maecenas volutpat blandit.","title":"Ultrices tincidunt"},{"location":"en/software/HomebreweryCoCTheme/#aliquam","text":"sem et tortor consequat id porta. Fermentum odio eu feugiat pretium nibh. Laoreet suspendisse interdum consectetur libero id faucibus nisl tincidunt eget. Laoreet sit amet cursus sit amet dictum sit amet justo. Purus viverra accumsan in nisl nisi scelerisque eu ultrices. Id semper risus in hendrerit gravida rutrum. Ornare aenean euismod elementum nisi quis eleifend quam. Maecenas sed enim ut sem viverra. Leo integer malesuada nunc vel risus commodo viverra maecenas. Mattis pellentesque id nibh tortor id aliquet lectus proin. Blandit aliquam etiam erat velit scelerisque in dictum non. Quam pellentesque nec nam aliquam. Ut lectus arcu bibendum at varius vel pharetra. Consectetur lorem donec massa sapien faucibus. Nullam vehicula ipsum a arcu cursus vitae. At ultrices mi tempus imperdiet nulla malesuada. Pulvinar pellentesque habitant morbi tristique. Vel pretium lectus quam id leo. Integer enim neque volutpat ac. Condimentum mattis pellentesque id nibh tortor id aliquet lectus.","title":"Aliquam"},{"location":"en/software/HomebreweryCoCTheme/#tristique","text":"magna sit amet purus gravida. Amet cursus sit amet dictum sit amet justo donec enim. Velit aliquet sagittis id consectetur purus ut faucibus. Ipsum suspendisse ultrices gravida dictum fusce ut placerat orci. Aliquam ut porttitor leo a diam sollicitudin tempor id eu. Elementum pulvinar etiam non quam lacus suspendisse. Vitae aliquet nec ullamcorper sit amet risus nullam eget. Venenatis lectus magna fringilla urna porttitor rhoncus dolor purus. Blandit cursus risus at ultrices mi. Auctor neque vitae tempus quam pellentesque nec nam aliquam. Tristique risus nec feugiat in fermentum posuere urna nec tincidunt. A arcu cursus vitae congue mauris rhoncus aenean. Arcu ac tortor dignissim convallis aenean et tortor at risus. Cras tincidunt lobortis feugiat vivamus at augue eget arcu dictum. Enim lobortis scelerisque fermentum dui faucibus in ornare quam. Eget duis at tellus at. Etiam tempor orci eu lobortis elementum nibh. Lorem ipsum dolor sit amet consectetur adipiscing elit pellentesque. Tortor aliquam nulla facilisi cras fermentum odio eu feugiat. Tincidunt tortor aliquam nulla facilisi cras fermentum odio eu. Tincidunt augue interdum velit euismod in pellentesque massa placerat duis. Accumsan tortor posuere ac ut consequat semper viverra nam. Ante in nibh mauris cursus mattis molestie a iaculis at. Vivamus at augue eget arcu dictum. Penatibus et magnis dis parturient montes nascetur ridiculus mus. Gravida arcu ac tortor dignissim convallis aenean et tortor at. In mollis nunc sed id semper risus in hendrerit gravida. Ut lectus arcu bibendum at varius. Tristique magna sit amet purus.","title":"Tristique"},{"location":"en/software/HomebreweryCoCTheme/#lectus-urna","text":"duis convallis convallis tellus id interdum velit. Est sit amet facilisis magna. Lectus sit amet est placerat in egestas. Sit amet est placerat in egestas erat. Cras adipiscing enim eu turpis. Mattis nunc sed blandit libero volutpat sed cras. Orci dapibus ultrices in iaculis nunc sed. Mi eget mauris pharetra et ultrices neque ornare. Lacinia quis vel eros donec ac odio. Diam vulputate ut pharetra sit amet aliquam id diam. Faucibus interdum posuere lorem ipsum dolor. Cum sociis natoque penatibus et. Eget arcu dictum varius duis at consectetur lorem donec. Vel risus commodo viverra maecenas accumsan lacus vel.","title":"Lectus urna"},{"location":"en/software/HomebreweryCoCTheme/#viverra-nam","text":"libero justo laoreet sit amet cursus sit amet. Lorem ipsum dolor sit amet consectetur adipiscing elit pellentesque habitant. Netus et malesuada fames ac. Ut tortor pretium viverra suspendisse potenti nullam ac. Pellentesque habitant morbi tristique senectus et netus et malesuada fames. Libero id faucibus nisl tincidunt eget nullam. Quis imperdiet massa tincidunt nunc pulvinar sapien et. Elit eget gravida cum sociis natoque penatibus et. Turpis in eu mi bibendum neque egestas congue quisque egestas. Etiam tempor orci eu lobortis elementum. Urna condimentum mattis pellentesque id nibh. Consectetur adipiscing elit pellentesque habitant morbi. Pellentesque nec nam aliquam sem et tortor consequat id porta. Mauris cursus mattis molestie a iaculis at erat. Neque gravida in fermentum et sollicitudin ac. Sit amet justo donec enim diam vulputate ut. Nullam non nisi est sit amet facilisis. Euismod elementum nisi quis eleifend quam adipiscing. Gravida rutrum quisque non tellus. Interdum varius sit amet mattis.","title":"Viverra nam"},{"location":"en/software/HomebreweryCoCTheme/#lectus-magna","text":"fringilla urna porttitor rhoncus dolor. Sed elementum tempus egestas sed. Nullam eget felis eget nunc lobortis. Imperdiet dui accumsan sit amet nulla facilisi morbi tempus. Eros donec ac odio tempor orci dapibus. Pulvinar pellentesque habitant morbi tristique. Bibendum ut tristique et egestas quis ipsum suspendisse ultrices gravida. Nulla facilisi etiam dignissim diam quis enim. Massa eget egestas purus viverra accumsan in nisl. Volutpat maecenas volutpat blandit aliquam etiam. Eget duis at tellus at. Vestibulum rhoncus est pellentesque elit ullamcorper dignissim cras tincidunt. Nibh ipsum consequat nisl vel pretium lectus quam. Vitae turpis massa sed elementum tempus egestas. Sit amet massa vitae tortor condimentum lacinia. Interdum posuere lorem ipsum dolor sit amet.","title":"Lectus magna"},{"location":"en/software/HomebreweryCoCTheme/#ac-feugiat","text":"sed lectus vestibulum. Tempus iaculis urna id volutpat lacus laoreet non. Blandit aliquam etiam erat velit. In fermentum et sollicitudin ac. Bibendum neque egestas congue quisque egestas diam. Sed euismod nisi porta lorem mollis aliquam. Tempus egestas sed sed risus pretium quam vulputate. Vitae aliquet nec ullamcorper sit amet risus nullam. Mi tempus imperdiet nulla malesuada pellentesque elit eget gravida cum. Rhoncus mattis rhoncus urna neque. Est ante in nibh mauris cursus. Et sollicitudin ac orci phasellus egestas. Diam volutpat commodo sed egestas egestas fringilla phasellus faucibus scelerisque. Ante metus dictum at tempor commodo ullamcorper. Risus feugiat in ante metus dictum at tempor. Lacus sed turpis tincidunt id aliquet risus feugiat in ante. Malesuada fames ac turpis egestas. Id cursus metus aliquam eleifend mi in nulla posuere sollicitudin. Sed felis eget velit aliquet sagittis. Elit eget gravida cum sociis natoque penatibus et.","title":"Ac feugiat"},{"location":"en/software/HomebreweryCoCTheme/#neque-sodales","text":"ut etiam sit amet nisl purus in mollis. Molestie at elementum eu facilisis sed odio morbi quis. Euismod quis viverra nibh cras pulvinar mattis nunc. Duis tristique sollicitudin nibh sit amet commodo nulla facilisi. Ut faucibus pulvinar elementum integer enim neque volutpat. Massa id neque aliquam vestibulum morbi blandit. Fringilla urna porttitor rhoncus dolor purus non enim praesent elementum. Massa tincidunt dui ut ornare lectus sit amet est. Senectus et netus et malesuada fames ac turpis. Rutrum tellus pellentesque eu tincidunt tortor aliquam. Nec ullamcorper sit amet risus nullam eget felis. Tincidunt arcu non sodales neque sodales. Dui vivamus arcu felis bibendum ut tristique et egestas quis. Tortor consequat id porta nibh venenatis cras sed felis eget.","title":"Neque sodales"},{"location":"en/software/HomebreweryCoCTheme/#consequat-mauris","text":"nunc congue nisi vitae suscipit tellus. Sed ullamcorper morbi tincidunt ornare massa eget egestas purus. Consequat mauris nunc congue nisi vitae. Odio pellentesque diam volutpat commodo sed egestas egestas fringilla. Volutpat blandit aliquam etiam erat velit scelerisque in dictum non. Pulvinar pellentesque habitant morbi tristique senectus et netus et. Lectus arcu bibendum at varius. Mauris in aliquam sem fringilla ut morbi tincidunt. Sit amet consectetur adipiscing elit duis tristique sollicitudin nibh. Condimentum vitae sapien pellentesque habitant morbi. Consequat interdum varius sit amet mattis vulputate enim nulla aliquet. Tempus iaculis urna id volutpat lacus laoreet non. Ac turpis egestas maecenas pharetra convallis posuere morbi leo urna. Quisque non tellus orci ac auctor augue. Aliquet porttitor lacus luctus accumsan tortor posuere. Maecenas volutpat blandit aliquam etiam erat velit scelerisque in. Feugiat nibh sed pulvinar proin. Id ornare arcu odio ut sem nulla pharetra diam.","title":"Consequat mauris"},{"location":"en/software/HomebreweryCoCTheme/#venenatis-cras-sed","text":"felis eget velit. Et malesuada fames ac turpis egestas integer eget aliquet nibh. Sed egestas egestas fringilla phasellus faucibus scelerisque eleifend. Iaculis at erat pellentesque adipiscing commodo. Consequat nisl vel pretium lectus quam id leo in. Elementum facilisis leo vel fringilla est. Massa sed elementum tempus egestas sed sed risus pretium. Tincidunt praesent semper feugiat nibh sed pulvinar proin gravida. Phasellus vestibulum lorem sed risus ultricies tristique nulla aliquet enim. Elit duis tristique sollicitudin nibh sit amet commodo nulla. Purus sit amet luctus venenatis lectus magna fringilla. Pharetra pharetra massa massa ultricies. Quisque egestas diam in arcu cursus. Ac orci phasellus egestas tellus. Sociis natoque penatibus et magnis. Et egestas quis ipsum suspendisse ultrices gravida dictum fusce. Eget magna fermentum iaculis eu non diam phasellus vestibulum lorem. Pellentesque elit eget gravida cum sociis natoque penatibus et magnis. Accumsan sit amet nulla facilisi morbi tempus.","title":"Venenatis cras sed"},{"location":"en/software/HomebreweryCoCTheme/#odio","text":"facilisis mauris sit amet massa vitae tortor condimentum. Enim ut tellus elementum sagittis vitae et leo. Facilisis magna etiam tempor orci eu lobortis elementum nibh. Tempus iaculis urna id volutpat lacus laoreet non curabitur gravida. Sed faucibus turpis in eu mi bibendum. Venenatis urna cursus eget nunc scelerisque. Praesent semper feugiat nibh sed. Nulla aliquet enim tortor at auctor. Donec adipiscing tristique risus nec feugiat in fermentum posuere urna. Sagittis vitae et leo duis ut diam quam nulla porttitor. Auctor urna nunc id cursus metus aliquam eleifend mi. Nullam non nisi est sit amet facilisis magna. Scelerisque eleifend donec pretium vulputate sapien nec sagittis. Purus gravida quis blandit turpis cursus in. Placerat in egestas erat imperdiet sed. Nisl nunc mi ipsum faucibus vitae.","title":"Odio"},{"location":"en/software/HomebreweryCoCTheme/#dui-faucibus","text":"in ornare quam viverra orci sagittis. Ultrices tincidunt arcu non sodales neque sodales. Neque viverra justo nec ultrices dui sapien. Malesuada fames ac turpis egestas sed tempus urna et pharetra. Varius vel pharetra vel turpis nunc eget lorem. Mi proin sed libero enim. Risus nec feugiat in fermentum posuere urna. Dignissim diam quis enim lobortis scelerisque. Sem nulla pharetra diam sit amet nisl. Ullamcorper malesuada proin libero nunc consequat. Hendrerit gravida rutrum quisque non tellus. Sit amet justo donec enim diam vulputate ut. Cras semper auctor neque vitae tempus quam. Ultrices neque ornare aenean euismod elementum nisi quis eleifend. Vitae tortor condimentum lacinia quis vel eros donec.","title":"Dui faucibus"},{"location":"en/software/UtbultDesignSite/","text":"","title":"UtbultDesignSite"},{"location":"sv/","text":"UTBULT DESIGN Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"UTBULT DESIGN"},{"location":"sv/#utbult-design","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"UTBULT DESIGN"},{"location":"sv/about_me/","text":"Om mig","title":"Om mig"},{"location":"sv/about_me/#om-mig","text":"","title":"Om mig"},{"location":"sv/hardware/","text":"","title":"Index"},{"location":"sv/hardware/EmbeddedRust/","text":"Rust f\u00f6r inbyggda system - En introduktion Vad \u00e4r Rust? Rust is a modern systems programming language developed by the Mozilla Corporation. It is intended to be a language for highly concurrent and highly secure systems. It compiles to native code; hence, it is blazingly fast like C and C++. Tutorialspoint on Rust Vad \u00e4r d\u00e5 f\u00f6rdelen med Rust? Systems and application programming languages face two major problems It is difficult to write secure code (and) it is difficult to write multi-threaded code. Iden med Rust \u00e4r att ha ett programmeringsspr\u00e5k som prioriterar att utveckla snabba, h\u00e5rdvarun\u00e4ra program. Detta g\u00f6rs med concurrency , dvs att programmet best\u00e5r av olika delar som kan k\u00f6ras samtidigt. Rustup Tutorialspoint Rustup \u00e4r ett terminalbaserat verktyg f\u00f6r att hantera versioner av rustkompilatorn och de verktyg som kr\u00e4vs f\u00f6r att kompilera rustkod. N\u00e4r rustup installeras kommer ocks\u00e5 en kompilator f\u00f6r rust att h\u00e4nga med, kallad rustc . Rustup installation - Manjaro sudo pacman -S rustup Introduktion till rust H\u00e4r kommer en introduktion till rust. Om du k\u00e4nner att du har koll kan du skippa den. Annars om du k\u00e4nner dig relativt s\u00e4ker men vill ha en genomg\u00e5ng om \u00e4gandeskap kan du kolla Exempel 8 - \u00c4gandeskap och Exempel 9 - L\u00e5nande . Exempel 1 - Hello World Vi b\u00f6rjar med ett enkelt exempel. Vi ska skriva ett hello world program i rust och kompilerar det f\u00f6r att k\u00f6ras p\u00e5 din dator. B\u00f6rja med att skapa en mapp som heter exempel1-helloWorld mkdir exempel1-helloWorld cd exempel1-helloWorld D\u00e4r i vill vi skapa sourcefilen f\u00f6r hello world programmet touch helloWorld.rs Notera att fil\u00e4ndelsen f\u00f6r rust \u00e4r .rs Senare g\u00e5r vi igenom hur man anv\u00e4nder en IDE f\u00f6r att skriva, kompilera och k\u00f6ra rustkod i. Men f\u00f6r enkelhetens skull b\u00f6rjar vi med att anv\u00e4nda en textredigerare f\u00f6r att skriva koden i och en terminal f\u00f6r att kompilera och k\u00f6ra i. \u00d6ppna denna fil i en textredigerare. Jag rekommenderar Sublime Text f\u00f6r enkelhetens skull. D\u00e4r l\u00e4gger du till. fn main() { println!(\"Hello world!\"); } H\u00e4r har vi n\u00e5gra nyckelord. fn \u00e4r en definition f\u00f6r att skapa en funktion, och fn main() \u00e4r d\u00e5 den funktionen som kommer att k\u00f6ras n\u00e4r ett kompilerat rustprogram startar. println! \u00e4r ett macro f\u00f6r att printa text. Ett macro \u00e4r egentligen ett namn f\u00f6r en bit kod som \u00e4r definierad p\u00e5 n\u00e5got annat st\u00e4lle. Vi som programmerare beh\u00f6ver inte veta exakt hur ett program ska b\u00e4ra sig \u00e5t f\u00f6r att printa text p\u00e5 en terminal, utan vi vill bara kunna g\u00f6ra det. D\u00e4rf\u00f6r anv\u00e4nder vi ett macro f\u00f6r att printa text, som sedan ers\u00e4tts med den bit kod som \u00e4r n\u00f6dv\u00e4ndig just f\u00f6r att printa under kompileringsprocessen. Det viktiga du beh\u00f6ver veta \u00e4r att ett macro alltid markeras i rust med ett utropstecken, d\u00e4rf\u00f6r \u00e4r det println! och inte println . Kompilera programmet F\u00f6r att kompilera programmet anv\u00e4nder vi en kompilator som h\u00e4nger med i [[#Rustup|rustup]], kallad rustc . I exempel1-helloWorld d\u00e4r sourcefilen helloWorld.rs ligger vill du vara. D\u00e4r kallar du p\u00e5 rustc och skickar in sourcefilen som ska kompileras. rustc helloWorld.rs Detta kommer genera en fil med samma namn, fast utan fil\u00e4ndelsen .rs . Detta \u00e4r v\u00e5rt program. Testa att k\u00f6ra programmet i terminalen ./helloWorld Skriver den ut Hello world! ? Is\u00e5fall funkade allt, och din kod kompilerades. Exempel 2 - Printa med argument N\u00e4r man testar saker i vilket programmeringsspr\u00e5k som helst, kan det vara bra att kunna printa vad en variabel inneh\u00e5ller. I rust kan vi, ist\u00e4llet f\u00f6r att sj\u00e4lv g\u00f6ra en str\u00e4ng och s\u00e4tta i variabeln i den, printa med argument . Det betyder egentligen att vi skriver i en str\u00e4ng vart ett argument ska skrivas ut . Detta g\u00f6rs i rust med {} . Vi g\u00f6r ett exempelprogram d\u00e4r vi sparar antalet br\u00f6der du har i en variabel, och sedan printar denna variabel. G\u00f6r en ny mapp med namnet example2-printaMedArgument och i den, skapa en sourcefil med namnet howManyBrothers.rs . mkdir example2-howManyBrothers cd example2-howManyBrothers touch howManyBrothers.rs I denna nya fil kan du skriva f\u00f6ljande fn main() { println!(\"I have {} brothers.\", 3); } Sedan kompilera och k\u00f6r programmet p\u00e5 samma s\u00e4tt som i exempel 1 rustc howManyBrothers.rs ./howManyBrothers Det som h\u00e4nder nu \u00e4r att rust ser att du har ett argument, 3 i mitt fall, och att du har {} i str\u00e4ngen som ska printas. Rust tar d\u00e4rf\u00f6r argumentet och s\u00e4tter in det d\u00e4r det st\u00e5r {} , vilket resulterar i I have 3 brothers. Exempel 3 - Variabler Rust kan, p\u00e5 samma s\u00e4tt som till exempel python, sj\u00e4lv r\u00e4kna ut vilken typ en variabel ska vara utifr\u00e5n den data du skickar in i denna. F\u00f6r att deklarera en variabel i rust anv\u00e4nder du let . Vi g\u00f6r om det f\u00f6reg\u00e5ende exemplet, fast nu anv\u00e4nder vi en variabel f\u00f6r att spara hur m\u00e5nga br\u00f6der du har. mkdir example3-howManyBrothersVar cd example3-howManyBrothersVar touch howManyBrothersVar.rs Nu vill vi ist\u00e4llet specificera en variabel d\u00e4r vi sparar hur m\u00e5nga br\u00f6der du har och sedan anv\u00e4nder den h\u00e4r variabeln i printsatsen. fn main() { let brothers = 3; println!(\"I have {} brothers.\", brothers); } Testa att kompilera och k\u00f6ra detta rustc howManyBrothersVar.rs ./howManyBrothersVar Vi kan dock s\u00e4ga explicit till rust att en variabel ska vara en specifik typ. Om vi till exempel vet att vi beh\u00f6ver inte ha ett negativt antal br\u00f6der, och vi kommer aldrig ha mer \u00e4n 255 br\u00f6der. Is\u00e5fall kan vi spara antalet br\u00f6der i en unsigned (positiv) 8-bitars heltal; en u8 . I rust specificerar vi detta igenom att skriva ett kolon efter variabelnamnet och sedan vilken typ den ska vara (innan lika med tecknet). Testa att l\u00e4gga till detta fn main() { let brothers:u8 = 3; println!(\"I have {} brothers.\", brothers); } Kompilerar du och k\u00f6r detta, kommer du f\u00e5 samma resultat som f\u00f6rut. Skulle du nu dock v\u00e4lja att ha ett negativt antal br\u00f6der, kommer rust inte att l\u00e5ta dig kompilera d\u00e5 vi explicit sagt att denna variabel ska vara ett positivt 8-bitars tal. Testa att byta antalet br\u00f6der till -1 och kompilera. fn main() { let brothers:u8 = -1; println!(\"I have {} brothers.\", brothers); } Detta resulterar i f\u00f6ljande error | let brothers:u8 = -1; | ^^ | | | cannot apply unary operator `-` Allts\u00e5, operatorn - funkar inte p\u00e5 ett positivt heltal. Vill du l\u00e4sa mer om olika typer rekommenderar jag Tutorialspoint: Rust - Data Types . Exempel 4 - \u00c4ndra variabler I de flesta programmeringsspr\u00e5k har du variabler som man kan \u00e4ndra v\u00e4rde p\u00e5, och variabler som du specificerat ska vara konstanta (dvs att dessa inte ska \u00e4ndras efter att de skapats). Detta \u00e4r dock inte fallet i rust. H\u00e4r m\u00e5ste du ist\u00e4llet specificera att en variabel ska g\u00e5 att \u00e4ndra p\u00e5. Vi testar med ett nytt exempel mkdir example4-howManyBrothersUpdate cd example4-howManyBrothersUpdate touch howManyBrothersUpdate.rs S\u00e4g att du har ett program d\u00e4r du sparar hur m\u00e5nga br\u00f6der du har och sedan printar ut detta antal. Men precis mellan det \u00f6gonblick programmet sparar antalet br\u00f6der och ska printa ut det, f\u00e5r du en ny bror (n\u00e5got av ett edge case men \u00e4nd\u00e5). Du vill d\u00e4rf\u00f6r \u00e4ndra antalet br\u00f6der du har efter att du skapat variabeln. fn main() { let brothers = 3; println!(\"I have {} brothers.\", brothers); brothers = 4; println!(\"I now have {} brothers.\", brothers); } F\u00f6rs\u00f6ker du kompilera detta f\u00e5r du f\u00f6ljande error | brothers = 4; | ^^^^^^^^^^^^ cannot assign twice to immutable variable Det den s\u00e4ger \u00e4r i princip att du f\u00f6rs\u00f6ker skriva \u00f6ver en immutable (konstant) variabel. Det man beh\u00f6ver g\u00f6ra i rust f\u00f6r att en variabel ska f\u00e5 \u00e4ndras, \u00e4r att specificera att den ska vara mutable (muterbar/m\u00f6jlig att \u00e4ndra). Detta g\u00f6r du med nyckelordet mut . Testa att l\u00e4gga till mut framf\u00f6r deklarationen av variabeln (mellan let och variabelnamnet) fn main() { let mut brothers = 3; println!(\"I have {} brothers.\", brothers); brothers = 4; println!(\"I now have {} brothers.\", brothers); } Nu lyckas programmet kompileras och k\u00f6ras. Variabler kan \u00e4ven deklareras som konstanta i rust, vilket ger dem en del mer restriktioner. \u00c4r du mer intresserad av det kan du l\u00e4sa Tutorialspoint: Rust - Constants . Exempel 5 - Str\u00e4ngar Rust g\u00f6r en distinkt skillnad mellan tv\u00e5 sorters str\u00e4ngar; litterala str\u00e4ngar och str\u00e4ngobjekt. En litteral str\u00e4ng \u00e4r en str\u00e4ng som definieras under kompileringen och sedan anv\u00e4nds av programmet, men den \u00e4ndras aldrig. Exempelvis om du har en meny i ditt program, d\u00e4r alla alternativ skrivs ut i en terminal. Programmet kommer aldrig att sj\u00e4lv \u00e4ndra sin meny, och d\u00e4rf\u00f6r kan denna str\u00e4ng vara statisk. Notera att detta inte betyder att du inte kan spara str\u00e4ngen i en variabel. Det kan du g\u00f6ra med f\u00f6ljande typ. fn main() { let name:&str = \"Josef\"; } Ett str\u00e4ngobjekt \u00e4r en str\u00e4ng som programmet sj\u00e4lv kommer att \u00e4ndra p\u00e5. F\u00f6r att f\u00e5 en s\u00e5n beh\u00f6ver du skapa str\u00e4ngobjektet med funktionen new() . fn main() { let mut buffer = String::new(); } F\u00f6r att \u00e4ndra str\u00e4ngen sedan finns en massa funktioner (kolla in Tutorialspoint: Rust - String ). I exempel kan vi anv\u00e4nda funktionen push_str() , f\u00f6r att fylla p\u00e5 str\u00e4ngobjektet med en litteral str\u00e4ng (allts\u00e5 en vi vet vad den inneh\u00e5ller under kompileringen) fn main() { let mut buffer = String::new(); buffer.push_str(\"Hello\"); } Exempel 6 - If-satser, loopar och s\u00e5nt Vi g\u00e5r snabbt igenom lite om if-satser, loopar och liknande. I rust beh\u00f6ver du inte ha parenteser runt if, for och while satser (p\u00e5 samma s\u00e4tt som i python) // En if-sats utan paranteser if i == 2 { // Do stuff } For loopar i rust ser ocks\u00e5 lite annorlunda ut. Du beh\u00f6ver inte deklarera en variabel som du sedan anv\u00e4nder f\u00f6r att loopa \u00f6ver. Rust kan lista ut det sj\u00e4lv. F\u00f6r att loopa fr\u00e5n ett v\u00e4rde till ett annat anv\u00e4nder du det som heter in och definierar en range som ska loopas \u00f6ver. H\u00e4r loopar vi fr\u00e5n 0 till, men inte med, 10 for j in 0..10 { // Do stuff } Vill du l\u00e4sa p\u00e5 mer, kan du se \u00f6ver Tutorialspoint: Rust - Loop Exempel 7 - Funktioner Funktioner i rust deklareras med nyckelordet fn . Man kan specificera vad funktionen retunerar med -> type . fn function_name(var1, var2) -> return_type { // Stuff return value; } Man kan ocks\u00e5 retunera ett v\u00e4rde i en funktion igenom att avsluta en funktion utan semikolon p\u00e5 slutet fn function_name(var1, var2) -> return_type { // The same thing as return value; value } Variabler f\u00f6r indata till funktionen kan man ocks\u00e5 specificera vilka typer det ska vara, p\u00e5 samma s\u00e4tt som n\u00e4r man deklarerar en variabel fn function_name(var1:u8, var2:&str) { // Stuff } F\u00f6rutom explicita v\u00e4rden kan referenser till variabler skickas in i funktioner (som pekare i C) fn main() { let mut no:i32 = 5; mutate_no_to_zero(&mut no); println!(\"The value of no is:{}\",no); } fn mutate_no_to_zero(param_no:&mut i32) { *param_no = 0; //de reference } Exempel 8 - \u00c4gandeskap En del som \u00e4r mer omst\u00e4ndligt i rust j\u00e4mf\u00f6rt med till exempel C eller python, \u00e4r att en variabel kan endast \u00e4gas av en funktion . H\u00e4r m\u00e5ste vi dock g\u00f6ra en distinkt skillnad mellan variabler som \u00e4r av en primitiv typ eller en som inte \u00e4r det. En variabel av en primitiv typ \u00e4r en enkel variabel som \u00e4r inbyggd i rust (typ). Detta inkluderar till exempel u8 , i8 , f8 , bool och char . Men n\u00e4r en variabel \u00e4r mer komplicerad, n\u00e5gonting som kanske kan vara olika storlekar eller en typ som du som anv\u00e4ndare skapad (en klass till exempel), \u00e4r detta inte en primitiv typ. I C++ kan du till exempel ha en funktion som tar in en referens till en variabel. H\u00e4r anv\u00e4nder vi en vektor d\u00e5 det inte \u00e4r en primitiv typ. Funktionen kan \u00e4ndra p\u00e5 datan i vektorn, som d\u00e5 ocks\u00e5 \u00e4ndras f\u00f6r datan d\u00e4r funktionen kallades // Funktion som tar in en referens f\u00f6r en vektor void bar(vector<int>& vect) { // Referera till variabeln \u00e4ndra n\u00e5got i den vec.push_back(3); } void foo() { // Skapa en vektor och s\u00e4tt tv\u00e5 av v\u00e4rdena i den vector<int> vect; vect.push_back(1); vect.push_back(2); // Kalla p\u00e5 bar med vektorn bar(vec); // Vi kan nu fortfarande anv\u00e4nda vektorn, // men storleken har \u00e4ndrats efter att bar // har kallats cout << vec.size() << endl; } I rust d\u00e4remot g\u00e4ller f\u00f6ljande - En variabel f\u00e5r bara \u00e4gas av en funktion i taget - Tv\u00e5 variabler f\u00e5r inte peka p\u00e5 samma minnesadress Det h\u00e4r p\u00e5verkar mest icke-primitiva typer. Lite senare g\u00e5r vi igenom hur det funkar f\u00f6r primitiva typer. Det betyder i princip att samma kod i rust inte hade fungerat. Det \u00e4r f\u00f6r att efter att funktionen bar kallas p\u00e5 med variabeln som indata, konsumeras denna variabel av funktionen och kan inte l\u00e4ngre anv\u00e4ndas. // Funktion som tar in en vektor och \u00e4ndrar p\u00e5 den fn bar(mut vec:Vec<u8>) { vec.push(3); } fn main() { // Skapa en vektor let mut vec:Vec<u8> = Vec::new(); vec.push(1); vec.push(2); // Kalla p\u00e5 bar med vektorn som indata bar(vec); // Detta fungerar inte, d\u00e5 vec har konsumerats // av funktionen bar println!(\"Size: {}\", vec.len()); } F\u00f6rs\u00f6ker vi kompilera det h\u00e4r f\u00e5r vi ett error som s\u00e4ger att variabeln vec har flyttats (och inte kunnat kopieras) och inte l\u00e4ngre \u00e4gs av mainfunktionen. D\u00e4rf\u00f6r kan den inte anv\u00e4ndas l\u00e4ngre | let mut vec:Vec<u8> = Vec::new(); | ------- move occurs because `vec` has type `Vec<u8>`, which does not implement the `Copy` trait ... | bar(vec); | --- value moved here ... | println!(\"Size: {}\", vec.len()); | ^^^^^^^^^ value borrowed here after move Det betyder ocks\u00e5 att om vi f\u00f6rs\u00f6ker att skapa en variabel och kopierar den, f\u00e5r vi inte l\u00e4ngre anv\u00e4nda den gamla variabeln fn main() { // Skapa en vektor let mut vec:Vec<u8> = Vec::new(); vec.push(1); vec.push(2); // Det h\u00e4r \u00e4r okej. \u00c4gandeskapet till vec ligger // nu i vec2 let vec2 = vec; // Det h\u00e4r g\u00e5r dock inte, d\u00e5 vec inte l\u00e4ngre // finns utan har konsumerats println!(\"Size: {}\", vec.len()); } Anledningen till detta handlar om hur v\u00e4rden sparas n\u00e4r programmet k\u00f6rs. Det finns beskrivet bra i Tutorialspoint: Rust - Ownership . Undantaget till detta \u00e4r dock om man anv\u00e4nder primitiva typer. Det \u00e4r f\u00f6r att rust vet hur dessa ska kopieras p\u00e5 ett bra s\u00e4tt. Hade f\u00f6reg\u00e5ende exempel ist\u00e4llet varit f\u00f6r variabler av typen u8 , r\u00e4knar rust ut att det den ska g\u00f6ra \u00e4r att kopiera inneh\u00e5llet i variabeln . fn main() { // Skapa en primitiv variabel let u1 = 1; // S\u00e4tt v\u00e4rdet p\u00e5 en annan variabel till den // f\u00f6rsta variabeln. Detta resulterar i att // v\u00e4rdet i den f\u00f6rsta variabeln s\u00e4tts p\u00e5 // den andra let u2 = u1; // D\u00e4rf\u00f6r fungerar detta, d\u00e5 u2 inte \u00e4r samma // variabel som u1, utan bara har samma v\u00e4rde println!(\"u1: {}\", u1); } Exempel 9 - L\u00e5nande Man skulle kunna komma runt f\u00f6reg\u00e5ende exempel igenom att efter att funktionen k\u00f6rts, retunera variabeln och spara den i en ny variabel. // Funktion som tar in en vektor, \u00e4ndrar p\u00e5 den och // sedan retunerar den fn bar(mut vec:Vec<u8>) -> Vec<u8> { vec.push(3); return vec; } fn main() { // Skapa en vektor let mut vec:Vec<u8> = Vec::new(); vec.push(1); vec.push(2); // Kalla p\u00e5 bar med vektorn som indata, och skapa // en ny variabel med vektorn som funktionen // retunerar let vec2 = bar(vec); // Detta fungerar d\u00e5 vec2 typ \u00e4r en ny vektor println!(\"Size: {}\", vec2.len()); } Det blir dock l\u00e4tt omst\u00e4ndligt. D\u00e4rf\u00f6r kan en funktion \u00e4ven l\u00e5na en variabel. Den f\u00e5r en l\u00e5nad variabel som indata, d\u00e4r den kan \u00e4ndra p\u00e5 saker. Men n\u00e4r funktionen k\u00f6rts klart l\u00e4mnas variabeln tillbaks. Detta g\u00f6rs i rust igenom att referera till variabeln med ett & // Funktion som l\u00e5nar en vektor. Notera & innan variabeltypen fn bar(vec:&Vec<u8>) { println!(\"Size from a function: {}\", vec.len()); } fn main() { // Skapa en vektor let mut vec:Vec<u8> = Vec::new(); vec.push(1); vec.push(2); // Skicka in en referens till vec, vilket l\u00e5ter bar l\u00e5na den bar(&vec); // Vi har fortfarande kvar vec och kan anv\u00e4nda den println!(\"Size: {}\", vec.len()); } Notera dock att vi inte kan \u00e4ndra p\u00e5 variabeln i det h\u00e4r fallet, utan endast anv\u00e4nda den. F\u00f6r att variabeln ska kunna \u00e4ndras m\u00e5ste vi specificera att den ska vara muterbar b\u00e5de i funktionsdeklarationen och i funktionskallet . Detta g\u00f6rs med nyckelordet &mut // Funktion som l\u00e5nar en vektor och har r\u00e4tt att \u00e4ndra p\u00e5 den. // Notera &mut innan variabeltypen fn bar(vec:&mut Vec<u8>) { // \u00c4ndrar ineh\u00e5llet i vec. Utdatan sparas i en // skr\u00e4pvariabel, d\u00e5 rust annars genererar en // varning ang\u00e5ende utdata fr\u00e5n l\u00e5nade variabler let _ = &vec.push(3); println!(\"Size from a function: {}\", vec.len()); } fn main() { // Skapa en vektor let mut vec:Vec<u8> = Vec::new(); vec.push(1); vec.push(2); // Skicka in en referens till vec, vilket l\u00e5ter bar l\u00e5na den // och \u00e4ndra p\u00e5 den. Notera att vi explicit specificerar att // variabeln ska vara en muterbar referens bar(&mut vec); // Vi har fortfarande kvar vec och kan anv\u00e4nda den. Nu har den // dock \u00e4ndrats av funktionen println!(\"Size: {}\", vec.len()); } Cargo I rust har vi det som kallas crates , vilket \u00e4r som bibliotek i C. Det som dock \u00e4r smidigt mer rust \u00e4r att installationen och versionshantering av crates sk\u00f6ts av pakethanterare: Cargo . Cargo \u00e4r ganska likt pip om du anv\u00e4nt det. Skillnaden \u00e4r att cargo ocks\u00e5 l\u00f6ser virtuella milj\u00f6er (typ) och byggandet av projekt sj\u00e4lv. Cargo h\u00e4nger ocks\u00e5 med i rustup, vilket \u00e4r smidigt. Rustup vs Cargo H\u00e4r ser du vad som \u00e4r skillnaden mellan rustup och cargo H\u00e4r \u00e4r en till guide som ocks\u00e5 g\u00e5r igenom hur man kommer ig\u00e5ng med rust Meduim: Rust - A Beginner Cheat Sheet F\u00f6r mer information om crates kan du kolla in Tutorialspoint: Rust - Modules Skapa ett projekt N\u00e4r du vill skapa ett projekt i rust anv\u00e4nder du cargo. Du kan testa igenom att k\u00f6ra f\u00f6ljande, som kommer att skapa mappen cargo_test cargo new cargo_test Det cargo g\u00f6r \u00e4r att den s\u00e4tter upp en mappstruktur f\u00f6r dig och skapar de filer som kr\u00e4vs f\u00f6r att b\u00f6rja. S\u00e5 h\u00e4r ser mappen ut n\u00e4r du skapar den \u251c\u2500\u2500 Cargo.toml \u2514\u2500\u2500 src \u2514\u2500\u2500 main.rs Du f\u00e5r en src mapp d\u00e4r all din kod ska ligga och i den ligger main.rs , vilket \u00e4r den fil programmet kommer leta efter funktionen main i. I main.rs finns redan ett hello world exempel, s\u00e5 vi ska testa att bygga det. Det fina med att ha skapat projektet p\u00e5 det h\u00e4r s\u00e4ttet med cargo \u00e4r att vi kan anv\u00e4nda cargo f\u00f6r att bygga projektet. Om du \u00e4r i mappen cargo_test kan du bara k\u00f6ra cargo build f\u00f6r att kompilera programmet och cargo run f\u00f6r att k\u00f6ra det. cargo build cargo run Cargo bygger d\u00e5 programmet och k\u00f6r det, vilket printar ut Hello, world! p\u00e5 terminalen. Efter att du byggt programmet ser ditt projekt ut n\u00e5got s\u00e5h\u00e4r \u251c\u2500\u2500 Cargo.lock \u251c\u2500\u2500 Cargo.toml \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 main.rs \u2514\u2500\u2500 target \u251c\u2500\u2500 CACHEDIR.TAG \u2514\u2500\u2500 debug \u251c\u2500\u2500 build \u251c\u2500\u2500 cargo_test \u251c\u2500\u2500 cargo_test.d \u251c\u2500\u2500 deps \u2502 \u251c\u2500\u2500 cargo_test-99e382143f4d3aca \u2502 \u2514\u2500\u2500 cargo_test-99e382143f4d3aca.d \u251c\u2500\u2500 examples \u2514\u2500\u2500 incremental Det som \u00e4r v\u00e4sentligt h\u00e4r \u00e4r filen target/debug/cargo_test . Det \u00e4r ditt program! Du kan faktiskt k\u00f6ra den manuellt om du vill testa ./target/debug/cargo_test Debug eller Release Rust kan bygga ditt program p\u00e5 lite olika s\u00e4tt. Som standard \u00e4r att programmet byggs i debug , vilket betyder att kompilatorn l\u00e4gger till en del saker f\u00f6r att g\u00f6ra fels\u00f6kning lite enklare. Det \u00e4r d\u00e4rf\u00f6r ditt program hamnar i mappen debug . Om du en dag vill bygga en version av ditt program som ska anv\u00e4ndas kan du v\u00e4lja att bygga det i release l\u00e4get. Rust kommer d\u00e5 att optimera och g\u00f6ra programmet mindre. cargo build --release cargo run --release Cargo.toml och Cargo.lock N\u00e4r du skapar ett nytt projekt genereras en fil som heter Cargo.toml . Sedan n\u00e4r du kompilerar projektet genereras en till fil som heter Cargo.lock . Dessa filer beskriver vilka versioner av saker som projektet anv\u00e4nder. Cargo.toml \u00e4r den fil som du som programmerare skriver i. D\u00e4r kan du specificera vad ditt program heter, vilken version den \u00e4r p\u00e5 och vilka \u00f6vriga crates ditt program beh\u00f6ver anv\u00e4nda f\u00f6r att kunna k\u00f6ra. Cargo.lock skapas sedan automatiskt n\u00e4r du bygger ditt projekt. Den specificerar exakt vilka versioner av olika crates som anv\u00e4ndes n\u00e4r du kompilerade ditt program. Den l\u00e5ser allts\u00e5 versionerna. Detta g\u00f6r att om en annan programmerare sedan bygger ditt projekt, kommer han f\u00e5 de exakta versionerna av de crates som du anv\u00e4nde, vilket betyder att ditt program beter sig likadant f\u00f6r honom. Du kan testa att l\u00e4gga till en modul i din Cargo.toml fil. Under [dependencies] kan du l\u00e4gga f\u00f6ljande [dependencies] regex = { git = \"https://github.com/rust-lang/regex.git\" } K\u00f6r du nu cargo build kommer den b\u00f6rja att ladda ner regex craten fr\u00e5n github, och sedan bygga ditt projekt. Kollar du nu i Cargo.lock kommer du se att den har lagt till en massa saker som har med regex att g\u00f6ra. Det fina \u00e4r att du aldrig beh\u00f6ver \u00e4ndra i den filen sj\u00e4lv, bara se till att pusha den om du laddar upp ditt projekt med git. VS Code - Introduktion Geeks for Geeks - How to Setup Rust in VSCode? VS Code \u00e4r en IDE skapad av Microsoft. Den \u00e4r dock nu open-source. VS Code har bra support f\u00f6r att l\u00e4gga till moduler, vilket l\u00e5ter en enkelt anv\u00e4nda den f\u00f6r olika programmeringsspr\u00e5k. VS Code installation - Manjaro sudo pacman -S vscode F\u00f6r att sedan k\u00f6ra VS Code k\u00f6r du programmet som heter code . Rust plugin I VS Code kan du installera pluginet rust-analyzer . Den kommer att analysera din kod, ge dig code completion och hitta varningar och errors. G\u00e5 till Extentions i v\u00e4nsterpanelen i VS Code. V\u00e4l d\u00e4r kan du s\u00f6ka upp rust-analyzer och installera den F\u00f6r att debugga kod kan du ocks\u00e5 installera CodeLLDB Workspaces I VS Code har du det som kallas workspaces . Det kan beskrivas som den mapp d\u00e4r din kod ligger. Testa att \u00f6ppna testprojektet igenom att g\u00e5 till File > Open Folder... och v\u00e4lja cargo_test mappen. Nu ska mappen dyka upp p\u00e5 v\u00e4nstersidan, med alla submappar och filer. Testa att \u00f6ppna src/main.rs . D\u00e4r har du din hello world kod, och allt \u00e4r f\u00e4rgat korrekt vilket inneb\u00e4r att VS Code fattar att det ska vara rust kod. Testa att skriva in ett av de icke-fungerande exemplen som finns under [[#Introduktion till rust]] och spara main.rs . fn main() { let brothers:u8 = -1; println!(\"I have {} brothers.\", brothers); } Nu kommer du f\u00e5 ett r\u00f6tt str\u00e4ck under -1 . Om du hovrar musen \u00f6ver str\u00e4cket f\u00e5r du en hj\u00e4lpruta som beskriver varf\u00f6r din kod \u00e4r fel. Kompilera och debugga i VS Code VS Code har en integrerad terminal i sig, vilken man kan anv\u00e4nda f\u00f6r att manuellt bygga och k\u00f6ra ditt program. G\u00e5r till Terminal > New Terminal f\u00f6r att f\u00e5 upp den. Det kommer \u00f6ppna en terminal som befinner sig i workspace mappen. Testa att bygga och k\u00f6ra din kod i den. cargo build cargo run Det \u00e4r helt okej, men det smidiga med VS Code \u00e4r att du manuellt kan specificera vad VS Code ska g\u00f6ra n\u00e4r du trycker p\u00e5 \"Run and Debug\". G\u00e5 till menyn \"Run and Debug\" D\u00e4r kan du v\u00e4lja alternativet create a launch.json file ![](/img/hardware/EmbeddedRust/Rust 2022-12-15 20.47.29.excalidraw} Det kommer ge dig ett f\u00f6nster d\u00e4r det st\u00e5r att du har en Cargo.toml fil i ditt projekt, och det fr\u00e5gar om du vill generera en fil fr\u00e5n den. V\u00e4lj Yes . Den kommer generera en fil kallad .vscode/launch.json . Det \u00e4r en fil som specificerar hur VS Code ska agera n\u00e4r du v\u00e4ljer att bygga ditt projekt. Det autogenererade ska funka f\u00f6r v\u00e5rt exempel. Testa att bygga och k\u00f6ra projektet igenom att trycka p\u00e5 knappen RUN AND DEBUG Den kommer att bygga och k\u00f6ra ditt program. Du kan se hur saker h\u00e4nder nere i terminalen. V\u00e4ljer du fliken Terminal b\u00f6r du ocks\u00e5 se att programmet printade \"Hello, world!\" Nu kan du testa att debugga ditt program. Om du klickar bredvid din kod, till v\u00e4nster om ett radnummer i din mainfunktion. D\u00e5 f\u00e5r du upp en liten r\u00f6d cirkel. Om du nu k\u00f6r RUN AND DEBUG kommer ditt program att starta, men det pausar ditt program och s\u00e4tter det i debuggl\u00e4ge. Du kan l\u00e4sa p\u00e5 mer om hur debugging funkar p\u00e5 VS Codes sida . Embedded rust H\u00e4r \u00e4r ett par bra tutorials p\u00e5 det h\u00e4r: Jonathan Klimt - Rust on STM32: Getting started och Daschl writes. sometimes - Getting Started with the nRF52840 in Rust Ist\u00e4llet f\u00f6r att k\u00f6ra v\u00e5rt program p\u00e5 en laptop kommer du antagligen vilja k\u00f6ra den p\u00e5 ett devboard, vilket kallas embedded . Det finns ett par problem med detta. Processorn i din dator \u00e4r inte densamma som processorn p\u00e5 ditt devboard. Den l\u00e4ser inte samma maskinkod som din dator, utan \u00e4r byggd med en annan arkitektur . Processorn som sitter i din dator \u00e4r antagligen byggd p\u00e5 den arkitekturen som heter x86 , medans processorn p\u00e5 din devboard \u00e4r byggt p\u00e5 arkitekturen ARM . Sedan m\u00e5ste du ocks\u00e5 lyckats f\u00e5 programmet till minnet p\u00e5 din devboard. Det \u00e4r inte som ett usbminne, du kan inte bara flytta \u00f6ver ett program till den, utan du m\u00e5ste skriva till dens minne. F\u00f6r att komma \u00f6ver det f\u00f6rsta problemet beh\u00f6ver din kod korskompileras (cross-compile). Det betyder att du har en kompilator p\u00e5 din dator som bygger ett program till en annan arkitektur. Det blir allts\u00e5 ett program som inte kommer kunna k\u00f6ras p\u00e5 din dator, men det kommer kunna k\u00f6ras p\u00e5 ditt devboard. I rust kan du ganska enkelt installera en korskompilator med rustup . Det du g\u00f6r \u00e4r att installera ett annat toolchain . B\u00f6rja med att skapa ett nytt projekt som vi nu kallar embedded_test . F\u00f6rslagsvis kan du g\u00f6ra det i samma mapp som cargo_test ligger cargo new embedded_test cd embedded_test Sedan vill vi installera toolchainen som kr\u00e4vs f\u00f6r ARM processorn rustup target install thumbv7m-none-eabi F\u00f6r att sedan skriva till devboardens minne g\u00f6r du det som heter att flasha minnet. Du kan installera en cargo modul just f\u00f6r att g\u00f6ra detta. cargo install cargo-flash Nu beh\u00f6ver du specificera att det h\u00e4r projektet ska kompileras f\u00f6r en annan arkitektur. Detta g\u00f6r du igenom att skapa en configfil. I mappen embedded_test kan du k\u00f6ra mkdir .cargo cd .cargo touch config.toml Sedan kan du redigera din configfil. Mappen .cargo \u00e4r en dold mapp, s\u00e5 det kan vara s\u00e5 att du m\u00e5ste specificera att du vill se dolda filer i din filhanterare f\u00f6r att kunna g\u00e5 in i den. I filen config kan du l\u00e4gga till # Byggargument [build] # D\u00e5 att v\u00e5rt target, allts\u00e5 devboardet, \u00e4r en ARM # processor vill vi att projektet ska korskompileras # till ARM target = \"thumbv7em-none-eabi\" # Lite specifikationer f\u00f6r vilken runner som ska anv\u00e4ndas n\u00e4r vi k\u00f6r cargo run [target.'cfg(all(target_arch = \"arm\", target_os = \"none\"))'] runner = \"probe-run --chip nRF52840_xxAA\" rustflags = [ # Adress specifikationer \"-C\", \"link-arg=--nmagic\", # Linker \"-C\", \"link-arg=-Tlink.x\", ] Efter det beh\u00f6ver vi ett linker skript . Det skriptet specificerar hur minnet p\u00e5 din devboard ska se ut. I mappen embedded_test kan du skapa filen memory.x och l\u00e4gga till MEMORY { /* Flashminnet startar p\u00e5 address 0x00000000 och \u00e4r storleken 64kB*/ FLASH : ORIGIN = 0x00000000, LENGTH = 1M /* Ramminnet startar p\u00e5 address 0x20000000 och \u00e4r storleken 20kB*/ RAM : ORIGIN = 0x20000000, LENGTH = 256K } Nu beh\u00f6ver du \u00e4ndra i filen Cargo.toml f\u00f6r att specificera hur programmet ska byggas. \u00d6ppna den och l\u00e4gg till efter [dependencies] [package] name = \"embedded_test\" version = \"0.1.0\" edition = \"2021\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html # Containers som kr\u00e4vs f\u00f6r att bygga projektet [dependencies] # Tillg\u00e5ng till generiska ARMgrejer, samt att explicit kunna k\u00f6ra assemblyinstruktioner cortex-m = { version = \"^0.7.6\", features = [\"inline-asm\"] } # Mer ARM grejer som specificerar hur programmet ska startas cortex-m-rt = \"0.6.12\" # Till\u00e5t printing i embedded kod rtt-target = { version = \"0.3.0\", features = [\"cortex-m\"] } # HAL interface som fungerar som mellan lager f\u00f6r din kod och NRF52840 processorn, s\u00e5 du # inte beh\u00f6ver lista ut vilka register som g\u00f6r vad nrf52840-hal = { version = \"0.16.0\", features = [\"rt\"] } # Panic handling f\u00f6r n\u00e4r din kod kraschar panic-rtt-target = { version = \"0.1.2\", features = [\"cortex-m\"] } # Specifikationer om hur programmet ska kompileras f\u00f6r release mode [profile.release] # Maximera optimering f\u00f6r storlek, d\u00e5 vi inte l\u00e4ngre har s\u00e5 mycket minne opt-level = 'z' # Link-time-optimizations som kommer hj\u00e4lpa mer med optimering lto = true Embedded kod Nu ska vi skriva lite kod. I din mainfil src/main.rs kan du skriva f\u00f6ljande hello world program // Main fungerar inte riktigt p\u00e5 samma s\u00e4tt i embedded // rust, s\u00e5 vi m\u00e5ste specificera att den inte ska // anv\u00e4nda orginella main #![no_main] // Vi har heller inte standardbiblioteket f\u00f6r att printa #![no_std] // Vi importerar funktionaliteten fr\u00e5n v\u00e5r HAL use nrf52840_hal as _; // Vi importerar ocks\u00e5 ett macro f\u00f6r att kunna printa use rtt_target::{rtt_init_print, rprintln}; #[cortex_m_rt::entry] fn main() -> ! { // Initialisera printing rtt_init_print!(); // Notera att vi anv\u00e4nder macrot rprintln och inte println rprintln!(\"Hello, World!\"); exit(); } // H\u00e4r specificerar vi vad som ska h\u00e4nda n\u00e4r programmet kraschar #[panic_handler] fn panic(_info: &core::panic::PanicInfo) -> ! { rprintln!(\"Panic!\"); exit(); } // H\u00e4r har vi en exitfunktion. Den beh\u00f6vs f\u00f6r att processorn inte ska forts\u00e4tta k\u00f6ra // icke-existerande instruktioner efter v\u00e5rt program pub fn exit() -> ! { loop { cortex_m::asm::bkpt(); } } Notera att vi har lite extra grejer fr\u00e5n det hello world exemplet vi gjorde f\u00f6r dator. Vi b\u00f6rjar med att st\u00e4nga av n\u00e5gra funktioner i rust. #![no_main] specificerar att ditt program inte ska starta fr\u00e5n main, utan ska starta p\u00e5 ett annat embeddedst\u00e4lle. Sedan refererar vi till funktionen main som en startpunkt fr\u00e5n vilken embeddedgrejerna ska starta din kod. Vi har heller inte tillg\u00e5ng till standardbiblioteket , vilket l\u00e5ter dig till exempel printa saker. D\u00e4rf\u00f6r l\u00e4gger vi \u00e4ven till #![no_std] . Sedan importera lite extra funktionalitet. nrf52840_hal \u00e4r ett mellanlager mellan din kod och h\u00e5rdvaran, vilket \u00e4r en NRF52840 processor. Med den slipper du h\u00e5lla reda p\u00e5 register och s\u00e5nt. rtt_target::rprintln implementerar ett nytt macro f\u00f6r att printa: rprintln . Den funkar precis som println , men kan k\u00f6ras p\u00e5 en embeddedenhet. Sedan specificerar vi en entry point , vilket \u00e4r d\u00e4r din kod kommer att b\u00f6rja. I v\u00e5rt fall heter funktionen \u00e4nd\u00e5 main , men du kan d\u00f6pa den till vad som helst. I mainfunktionen anv\u00e4nder vi det nya macrot rprintln f\u00f6r att skriva ut text. Sedan kallar vi p\u00e5 funktionen exit . Efter det har vi en till funktion som heter panic . Den registreras som vad som ska k\u00f6ras om din kod kraschar. I v\u00e5rt fall printar vi bara ett meddelande och kallar p\u00e5 exit , men det man ocks\u00e5 skulle kunna g\u00f6ra h\u00e4r \u00e4r att man st\u00e4nger ner externa komponenter korrekt eller dumpar massa info i en loggfil. Efter det har vi en funktion som heter exit . Det \u00e4r en funktion vi sj\u00e4lva kallar p\u00e5 n\u00e4r vi vill avsluta programmet. Anledningen till att vi g\u00f6r det \u00e4r f\u00f6r att din embeddedenhet inte kommer avsluta p\u00e5 samma s\u00e4tt som ett program p\u00e5 din laptop. K\u00f6r du ett program p\u00e5 din dator kommer en ny process att startas, ditt program k\u00f6rs och sen avslutas processen. Datorn forts\u00e4tter sedan med allt den h\u00e5ller p\u00e5 med f\u00f6r att k\u00f6ra ditt operativsystem. Din embeddedenhet d\u00e4remot, kommer inte bara sluta k\u00f6ra kod efter att ditt program tar slut. Den kommer att forts\u00e4tta plocka instruktioner fr\u00e5n minnet. Dessa \u00e4r inte saker du har lagt d\u00e4r, utan kan vara vadsomhelst. Det vill vi inte att den ska g\u00f6ra, f\u00f6r d\u00e5 kan vad som helst h\u00e4nda. D\u00e4rf\u00f6r har vi funktionen exit som kommer att s\u00e4tta processorn i en evighetsloop. Vi l\u00e4gger ocks\u00e5 till att den ska placera en breakpoint d\u00e4r, f\u00f6r om vi vill debugga. Du kan nu bygga din kod. F\u00f6rutsatt att allt \u00e4r gjort korrekt, kommer du inte f\u00e5 n\u00e5gra error. cargo build Flasha din kod Nu n\u00e4r du lyckats bygga ditt projekt \u00e4r det dags att flasha din kod till ditt devboard. F\u00f6r det beh\u00f6ver du containern probe-run cargo install probe-run Du kommer ocks\u00e5 beh\u00f6va ett verktyg fr\u00e5n Nordic Semiconductors f\u00f6r att interagera med devboarden. Det heter nrf5x-command-line-tools NRF tools installation - Manjaro med yay yay nrf5x-command-line-tools NRF tools installation - Manjaro med AUR git clone https://aur.archlinux.org/nrf5x-command-line-tools.git cd nrf5x-command-line-tools makepkg -si F\u00f6r att kunna flasha kod till ditt devboard m\u00e5ste det l\u00e5sas upp. Det \u00e4r d\u00e4rf\u00f6r vi beh\u00f6ver NRF tools . K\u00f6r kommandot nrfjprog --recover Nu n\u00e4r du l\u00e5st upp ditt devboard och konfigurerat i .cargo/config att det som ska h\u00e4nda n\u00e4r du k\u00f6r cargo run \u00e4r att den ska anv\u00e4nda probe-run f\u00f6r att flasha koden till ditt devboard, kan du nu k\u00f6ra koden cargo run Om allt g\u00e5tt som det ska b\u00f6r det resultera i f\u00f6ljande Finished dev [unoptimized + debuginfo] target(s) in 0.01s Running `probe-run --chip nRF52840_xxAA target/thumbv7em-none-eabi/debug/embedded_test` (HOST) INFO flashing program (3 pages / 12.00 KiB) (HOST) INFO success! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Hello, World! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 (HOST) INFO device halted without error Ditt devboard k\u00f6r allts\u00e5 hello world koden och skickar hello world till din dator, som sedan printar det i din terminal. Debugging i embedded rust Att kunna printa saker r\u00e4cker ofta f\u00f6r att testa enkla saker i ett program, men ibland kan det kr\u00e4vas lite mer kontroll \u00f6ver hur en embeddedplattform k\u00f6rs. I de fallen vill man ha en debugger f\u00f6r att kunna stoppa k\u00f6rningen av kod och kolla p\u00e5 alla variabler. Problemet med det s\u00e4tt vi satt upp exempelprojektet nu \u00e4r att probe-run inte har den funktionaliteten. I det h\u00e4r exemplet kommer vi d\u00e4rf\u00f6r s\u00e4tta upp en gdb instans som k\u00f6r p\u00e5 din dator och komunicerar med embeddedenheten. F\u00f6ljande exempel f\u00f6ljer lite vagt ferrous systems - Graphical Debugging with Embedded Rust Till att b\u00f6rja med kan du skapa ett nytt projekt i samma mapp som embedded_test som heter gdb_test . cargo new gdb_test cd gdb_test Kopiera \u00f6ver lite filer fr\u00e5n embedded_test cp ../embedded_test/Cargo.toml ./Cargo.toml cp ../embedded_test/src/main.rs src/main.rs cp ../embedded_test/memory.x memory.x cp -r ../embedded_test/.cargo ./.cargo Redigera Cargo.toml och byt variabeln name fr\u00e5n \"embedded_test\" till \"gdb_test\" . Nu kan vi b\u00f6rja med att s\u00e4tta upp debuggern. Exakt hur allt fungerar \u00e4r lite komplicerat, men i grunden beh\u00f6ver vi tre komponenter. Cargo GDB OpenOCD Cargo har vi redan anv\u00e4nt f\u00f6r att specificera hur vi ska kompilera projektet och vad som ska h\u00e4nda n\u00e4r vi k\u00f6r cargo run . GDB GDB \u00e4r det som kallas en debugger . Den ansvarar, p\u00e5 samma s\u00e4tt som probe-run, f\u00f6r att skicka ett program som cargo har kompilerat till OpenOCD och sedan f\u00f6r att specificera vart programmet ska stanna. GDB l\u00e5ter oss ocks\u00e5 titta p\u00e5 vad som h\u00e4nder p\u00e5 enheten fr\u00e5n din laptop. GDB \u00f6vers\u00e4tter i princip de instruktionerna som k\u00f6rs i ett program till l\u00e4sbar kod. I vanliga fall kommer dessa instruktioner vara i maskinspr\u00e5ket X86 , vilket \u00e4r vad din dator k\u00f6r. Men det kommer inte fungera f\u00f6r kod som k\u00f6rs p\u00e5 det inbyggda systemet, som \u00e4r byggt med en ARM arkitektur. P\u00e5 samma s\u00e4tt som vi tidigare beh\u00f6vde en korskompilator, beh\u00f6ver vi nu en GDB version som kan k\u00f6ras p\u00e5 din dator men l\u00e4ser ARM kod. F\u00f6r detta anv\u00e4nder vi GDB versionen arm-none-eabi-gdb . GDB installation - Manjaro med Pacman sudo pacman -S arm-none-eabi-gdb Konfigurera GDB Vi kan konfigurera GDB med en konfigfil. Skapa filen debug.gdb och l\u00e4gg till # Koppla till GDB servern som k\u00f6r lokalt p\u00e5 port 3333 (openocd) target remote :3333 # Flasha enheten med det program som specificerats i argumentet till gdb load # Resetta enheten (openocd) monitor reset halt # Starta exekvering av programmet continue OpenOCD OpenOCD \u00e4r det som kallas en embedded debug server . Det \u00e4r som ett mellanlager mellan GDB och enheten som koden k\u00f6rs p\u00e5. Man kan s\u00e4ga att den ansvarar f\u00f6r att ta emot program och instruktioner fr\u00e5n GDB och sedan komunicera dessa till enheten. N\u00e4r vi k\u00f6r OpenOCD startar den en lokal server p\u00e5 din dator som GDB kan koppla upp sig till via port 3333. OpenOCD installation - Manjaro med Pacman sudo pacman -S openocd Konfigurera OpenOCD Skapa filen debug_openocd.cfg och l\u00e4gg till # OpenOCD konfiguration. Specificerar att OpenOCD ska hitta en jlink interface till en nrf52 enhet # och skicka data \u00f6ver den source [find interface/jlink.cfg] transport select swd source [find target/nrf52.cfg] Rust runners En runner i rust syftar p\u00e5 det komandot som ska k\u00f6ras n\u00e4r en anv\u00e4ndare k\u00f6r cargo run . I f\u00f6reg\u00e5ende exemplet s\u00e5 anv\u00e4nde vi runnern som heter probe-run . Den \u00e4r enkel att s\u00e4tta upp, men l\u00e5ter oss inte debugga en enhet riktigt, utan endast printa fr\u00e5n den. Vi vill nu ist\u00e4llet anv\u00e4nda ett komando f\u00f6r att k\u00f6ra GDB med konfigfilen som vi just skapat. Redigera .cargo/config.toml och ers\u00e4tt raden runner = \"probe-run --chip nRF52840_xxAA\" med runner = \"arm-none-eabi-gdb -q -x debug.gdb\" F\u00f6rsta testet Nu \u00e4r alla bitar p\u00e5 plats f\u00f6r att b\u00f6rja testa att debugga. Vi g\u00f6r f\u00f6rsta exemplet i en terminal, men senare ska vi integrera allt med VSCode. D\u00e4rf\u00f6r ser det lite omst\u00e4ndigt ut nu. B\u00f6rja med att starta en terminal, g\u00e5 till projektmappen gdb_test och k\u00f6r openocd -f debug_openocd.cfg Flaggan -f specificerar att OpenOCD ska anv\u00e4nda filen debug_openocd.cfg som vi skapade tidigare. Om allt g\u00e5tt som det ska, b\u00f6r OpenOCD printa ut Open On-Chip Debugger 0.11.0 Licensed under GNU GPL v2 For bug reports, read http://openocd.org/doc/doxygen/bugs.html Info : Listening on port 6666 for tcl connections Info : Listening on port 4444 for telnet connections Info : J-Link OB-nRF5340-NordicSemi compiled Nov 7 2022 16:22:01 Info : Hardware version: 1.00 Info : VTarget = 3.300 V Info : clock speed 1000 kHz Info : SWD DPIDR 0x2ba01477 Info : nrf52.cpu: hardware has 6 breakpoints, 4 watchpoints Info : starting gdb server for nrf52.cpu on 3333 Info : Listening on port 3333 for gdb connections Allt detta betyder att OpenOCD hittat en OB-nRF5340-NordicSemi enhet \u00f6ver ett J-Link interface. Sedan startar den GDB servern och v\u00e4ntar p\u00e5 att en GDB instans ska koppla upp sig. \u00d6ppna en annan terminal, g\u00e5 till projektmappen gdb_test och k\u00f6r cargo run Den kommer printa ut att den k\u00f6r kommandot arm-none-eabi-gdb -q -x debug.gdb target/thumbv7em-none-eabi/debug/gdb_test , vilket \u00e4r den runnern vi specificerat tidigare. En GDB instans startas och printar ut f\u00f6ljande Reading symbols from target/thumbv7em-none-eabi/debug/gdb_test... cortex_m::asm::inline::__bkpt () at /home/josef/.cargo/registry/src/github.com-1ecc6299db9ec823/cortex-m-0.7.6/src/../asm/inline.rs:14 14 asm!(\"bkpt\", options(nomem, nostack, preserves_flags)); Loading section .vector_table, size 0x100 lma 0x0 Loading section .text, size 0x2030 lma 0x100 Loading section .rodata, size 0x680 lma 0x2130 Start address 0x00000100, load size 10160 Transfer rate: 15 KB/sec, 3386 bytes/write. target halted due to debug-request, current mode: Thread xPSR: 0x01000000 pc: 0x00000100 msp: 0x20040000 Program received signal SIGTRAP, Trace/breakpoint trap. gdb_test::exit () at src/main.rs:34 34 cortex_m::asm::bkpt(); (gdb) Det den s\u00e4ger i princip \u00e4r att den kopplar ihop sig till OpenOCD instansen, resetar enheten som OpenOCD \u00e4r kopplad till och startar programmet. Sedan stoppar den n\u00e4r den kommer fram till rad 34 i funktionen exit . G\u00e5r vi tillbaks till hello world koden som vi skrev tidigare och kollar p\u00e5 funktionen exit kan vi faktiskt se d\u00e4r varf\u00f6r: Exit kallar p\u00e5 en assemblyinstruktion vid namn bkpt som st\u00e5r f\u00f6r breakpoint . Det syftar p\u00e5 att en debugger som kommer till den instruktionen ska stanna programmet f\u00f6r att man ska kunna se p\u00e5 koden. Du har nu lyckats debugga din kod! Om du g\u00e5r tillbaks till terminalen d\u00e4r du k\u00f6r OpenOCD s\u00e5 ska den ha printat ut lite mer. Info : accepting 'gdb' connection on tcp/3333 Info : nRF52840-xxAA(build code: F0) 1024kB Flash, 256kB RAM undefined debug reason 8 - target needs reset Warn : Prefer GDB command \"target extended-remote 3333\" instead of \"target remote 3333\" target halted due to debug-request, current mode: Thread xPSR: 0x01000000 pc: 0x00000100 msp: 0x20040000 target halted due to debug-request, current mode: Thread xPSR: 0x01000000 pc: 0x00000100 msp: 0x20040000 target halted due to debug-request, current mode: Thread xPSR: 0x01000000 pc: 0x00000100 msp: 0x20040000 D\u00e4r st\u00e5r det att en GDB instans har kopplat till servern och skickat \u00f6ver ett program som ska till devboardet. OpenOCD programmerar devboardet och startar programmet, tills devboardet kommer till en breakpoint. L\u00e4ngst ner i GDB terminalen ser du att det st\u00e5r (gdb) och att text som du skriver in i terminalen dyker upp d\u00e4r. Det syftar p\u00e5 att du \u00e4r i en GDB konsol, d\u00e4r du kan integrera med k\u00f6rningen av programmet. Vi ska nu testa att l\u00e4gga till en egen breakpoint och se om vi kan f\u00e5 enheten att stanna d\u00e4r. K\u00f6r f\u00f6ljande komandon i GDB konsollen L\u00e4gg till en breakpoint p\u00e5 rad 19 i programmet (p\u00e5 samma rad som rprintln) break 19 Starta om enheten s\u00e5 att det k\u00f6r fr\u00e5n b\u00f6rjan av programmet igen monitor reset init K\u00f6r programmet continue Nu b\u00f6r konsollen visa att du hamnat p\u00e5 en breakpoint p\u00e5 rad 19 Breakpoint 1, gdb_test::__cortex_m_rt_main () at src/main.rs:19 19 rprintln!(\"Hello, World!\"); Snyggt. Nu har du sj\u00e4lv laggt en breakpoint i programmet. Men fr\u00e5gan \u00e4r d\u00e5, hur ser vi vad som h\u00e4nder p\u00e5 enheten n\u00e4r den stannat? Det enklaste s\u00e4ttet \u00e4r att anv\u00e4nda GDBs \"grafiska\" l\u00e4ge som heter tui . Detta f\u00e5r man ig\u00e5ng igenom att skriva tui enable Nu b\u00f6r du f\u00e5 upp n\u00e5got som ser ut s\u00e5h\u00e4r H\u00e4r \u00e4r din kod. GDB markerar ocks\u00e5 vart n\u00e5gonstans som programmet har stannat. Du kan testa att be GDB k\u00f6ra en rad till och sedan stanna igen igenom att skriva next Nu b\u00f6r GDB markera n\u00e4sta rad i din mainfil. Testa nu att forts\u00e4tta k\u00f6ra programmet tills n\u00e4sta breakpoint continue Och du kommer tillbaks till exit funktionen. Vill du avsluda GDB kan du k\u00f6ra exit Den kommer att p\u00e5peka att programmet fortfarande k\u00f6rs, men l\u00e5ter dig avsluta om du trycker p\u00e5 y . Anv\u00e4ndning av GDB Tyv\u00e4rr \u00e4r GDB i sig sj\u00e4lv inte s\u00e5pass intuitivt att det \u00e4r enkelt att b\u00f6rja med. Man kan s\u00e4tta breakpoints och titta p\u00e5 variablers v\u00e4rden i GDB konsollen. Men anledningen till att jag inte g\u00e5r djupare i det \u00e4r f\u00f6r att vi senare ska koppla ihop GDB med VSCode, f\u00f6r att kunna integrera med GDB d\u00e4rifr\u00e5n. Det kommer att vara lite enklare, men jag menar att det kan vara v\u00e4rt g\u00e5 igenom hur hur GDB sj\u00e4lv funkar f\u00f6r att f\u00e5 en klarare bild \u00f6ver vad som sker i varje steg. Embedded Rust i VSCode N\u00e4sta steg \u00e4r att konfigurera VSCode s\u00e5 vi enkelt kan bygga v\u00e5rt projekt och k\u00f6ra det. \u00d6ppna VSCode och \u00f6ppna projektet gdb_test ( File > Open Folder ). Till att b\u00f6rja med kan du g\u00e5 in i mappen src och \u00f6ppna mainfilen. Den kommer att ge dig ett par errors, men de kan du ignorera just nu. B\u00f6rja med att \u00f6ppna en ny terminal ( Terminal > New Terminal ) och k\u00f6r cargo run Det borde funka som tidigare. Den programerar ditt devboard och printar \"Hello, World!\". Vi vill dock kunna programera enheten med \"Run and Debug\" knappen i VSCode. F\u00f6rst beh\u00f6ver vi en SVD fil, som specificerar f\u00f6r OpenOCD hur den ska tolka specifika register p\u00e5 v\u00e5r enhet. Som tur \u00e4r har Nordic Semiconductors en SVD fil p\u00e5 Github. Klona deras nrfx repo i samma mapp som exempelna du gjort, och kopiera \u00f6ver filen nrfx/mdk/nrf52840.svd till mappen gdb_test . git clone git@github.com:NordicSemiconductor/nrfx.git cp nrfx/mdk/nrf52840.svd gdb_test Sen beh\u00f6ver vi ocks\u00e5 ett plugin till VSCode som heter Cortex-Debug . Installera det p\u00e5 samma s\u00e4tt som du installerade rust-analyzer . ElectroRules - VSCode Cortex-Debug Launch Configurations Nu ska du s\u00e4tta upp din launch.json fil. F\u00f6lj samma steg vi gjorde tidigare f\u00f6r att s\u00e4tta upp Run and Debug. Det ger dig en launch.json fil. Vi vill dock \u00e4ndra den s\u00e5 att ist\u00e4llet f\u00f6r att koden k\u00f6rs lokalt, k\u00f6rs den med GDB p\u00e5 embeddedenheten. Byt ut allt mellan m\u00e5svingarna fr\u00e5n { \"type\": \"lldb\", \"request\": \"launch\", \"name\": \"Debug\", \"program\": \"${workspaceFolder}/<executable file>\", \"args\": [], \"cwd\": \"${workspaceFolder}\" } Till { \"name\": \"Debug (OpenOCD)\", \"type\": \"cortex-debug\", \"request\": \"launch\", \"cwd\": \"${workspaceRoot}\", \"executable\": \"${workspaceFolder}/target/thumbv7em-none-eabi/debug/gdb_test\", \"servertype\": \"openocd\", \"runToEntryPoint\": \"main\", \"configFiles\": [\"debug_openocd.cfg\"], \"svdFile\": \"${workspaceFolder}/nrf52840.svd\" }","title":"Rust f\u00f6r inbyggda system - En introduktion"},{"location":"sv/hardware/EmbeddedRust/#rust-for-inbyggda-system-en-introduktion","text":"","title":"Rust f\u00f6r inbyggda system - En introduktion"},{"location":"sv/hardware/EmbeddedRust/#vad-ar-rust","text":"Rust is a modern systems programming language developed by the Mozilla Corporation. It is intended to be a language for highly concurrent and highly secure systems. It compiles to native code; hence, it is blazingly fast like C and C++. Tutorialspoint on Rust Vad \u00e4r d\u00e5 f\u00f6rdelen med Rust? Systems and application programming languages face two major problems It is difficult to write secure code (and) it is difficult to write multi-threaded code. Iden med Rust \u00e4r att ha ett programmeringsspr\u00e5k som prioriterar att utveckla snabba, h\u00e5rdvarun\u00e4ra program. Detta g\u00f6rs med concurrency , dvs att programmet best\u00e5r av olika delar som kan k\u00f6ras samtidigt.","title":"Vad \u00e4r Rust?"},{"location":"sv/hardware/EmbeddedRust/#rustup","text":"Tutorialspoint Rustup \u00e4r ett terminalbaserat verktyg f\u00f6r att hantera versioner av rustkompilatorn och de verktyg som kr\u00e4vs f\u00f6r att kompilera rustkod. N\u00e4r rustup installeras kommer ocks\u00e5 en kompilator f\u00f6r rust att h\u00e4nga med, kallad rustc .","title":"Rustup"},{"location":"sv/hardware/EmbeddedRust/#rustup-installation-manjaro","text":"sudo pacman -S rustup","title":"Rustup installation - Manjaro"},{"location":"sv/hardware/EmbeddedRust/#introduktion-till-rust","text":"H\u00e4r kommer en introduktion till rust. Om du k\u00e4nner att du har koll kan du skippa den. Annars om du k\u00e4nner dig relativt s\u00e4ker men vill ha en genomg\u00e5ng om \u00e4gandeskap kan du kolla Exempel 8 - \u00c4gandeskap och Exempel 9 - L\u00e5nande .","title":"Introduktion till rust"},{"location":"sv/hardware/EmbeddedRust/#exempel-1-hello-world","text":"Vi b\u00f6rjar med ett enkelt exempel. Vi ska skriva ett hello world program i rust och kompilerar det f\u00f6r att k\u00f6ras p\u00e5 din dator. B\u00f6rja med att skapa en mapp som heter exempel1-helloWorld mkdir exempel1-helloWorld cd exempel1-helloWorld D\u00e4r i vill vi skapa sourcefilen f\u00f6r hello world programmet touch helloWorld.rs Notera att fil\u00e4ndelsen f\u00f6r rust \u00e4r .rs Senare g\u00e5r vi igenom hur man anv\u00e4nder en IDE f\u00f6r att skriva, kompilera och k\u00f6ra rustkod i. Men f\u00f6r enkelhetens skull b\u00f6rjar vi med att anv\u00e4nda en textredigerare f\u00f6r att skriva koden i och en terminal f\u00f6r att kompilera och k\u00f6ra i. \u00d6ppna denna fil i en textredigerare. Jag rekommenderar Sublime Text f\u00f6r enkelhetens skull. D\u00e4r l\u00e4gger du till. fn main() { println!(\"Hello world!\"); } H\u00e4r har vi n\u00e5gra nyckelord. fn \u00e4r en definition f\u00f6r att skapa en funktion, och fn main() \u00e4r d\u00e5 den funktionen som kommer att k\u00f6ras n\u00e4r ett kompilerat rustprogram startar. println! \u00e4r ett macro f\u00f6r att printa text. Ett macro \u00e4r egentligen ett namn f\u00f6r en bit kod som \u00e4r definierad p\u00e5 n\u00e5got annat st\u00e4lle. Vi som programmerare beh\u00f6ver inte veta exakt hur ett program ska b\u00e4ra sig \u00e5t f\u00f6r att printa text p\u00e5 en terminal, utan vi vill bara kunna g\u00f6ra det. D\u00e4rf\u00f6r anv\u00e4nder vi ett macro f\u00f6r att printa text, som sedan ers\u00e4tts med den bit kod som \u00e4r n\u00f6dv\u00e4ndig just f\u00f6r att printa under kompileringsprocessen. Det viktiga du beh\u00f6ver veta \u00e4r att ett macro alltid markeras i rust med ett utropstecken, d\u00e4rf\u00f6r \u00e4r det println! och inte println .","title":"Exempel 1 - Hello World"},{"location":"sv/hardware/EmbeddedRust/#kompilera-programmet","text":"F\u00f6r att kompilera programmet anv\u00e4nder vi en kompilator som h\u00e4nger med i [[#Rustup|rustup]], kallad rustc . I exempel1-helloWorld d\u00e4r sourcefilen helloWorld.rs ligger vill du vara. D\u00e4r kallar du p\u00e5 rustc och skickar in sourcefilen som ska kompileras. rustc helloWorld.rs Detta kommer genera en fil med samma namn, fast utan fil\u00e4ndelsen .rs . Detta \u00e4r v\u00e5rt program. Testa att k\u00f6ra programmet i terminalen ./helloWorld Skriver den ut Hello world! ? Is\u00e5fall funkade allt, och din kod kompilerades.","title":"Kompilera programmet"},{"location":"sv/hardware/EmbeddedRust/#exempel-2-printa-med-argument","text":"N\u00e4r man testar saker i vilket programmeringsspr\u00e5k som helst, kan det vara bra att kunna printa vad en variabel inneh\u00e5ller. I rust kan vi, ist\u00e4llet f\u00f6r att sj\u00e4lv g\u00f6ra en str\u00e4ng och s\u00e4tta i variabeln i den, printa med argument . Det betyder egentligen att vi skriver i en str\u00e4ng vart ett argument ska skrivas ut . Detta g\u00f6rs i rust med {} . Vi g\u00f6r ett exempelprogram d\u00e4r vi sparar antalet br\u00f6der du har i en variabel, och sedan printar denna variabel. G\u00f6r en ny mapp med namnet example2-printaMedArgument och i den, skapa en sourcefil med namnet howManyBrothers.rs . mkdir example2-howManyBrothers cd example2-howManyBrothers touch howManyBrothers.rs I denna nya fil kan du skriva f\u00f6ljande fn main() { println!(\"I have {} brothers.\", 3); } Sedan kompilera och k\u00f6r programmet p\u00e5 samma s\u00e4tt som i exempel 1 rustc howManyBrothers.rs ./howManyBrothers Det som h\u00e4nder nu \u00e4r att rust ser att du har ett argument, 3 i mitt fall, och att du har {} i str\u00e4ngen som ska printas. Rust tar d\u00e4rf\u00f6r argumentet och s\u00e4tter in det d\u00e4r det st\u00e5r {} , vilket resulterar i I have 3 brothers.","title":"Exempel 2 - Printa med argument"},{"location":"sv/hardware/EmbeddedRust/#exempel-3-variabler","text":"Rust kan, p\u00e5 samma s\u00e4tt som till exempel python, sj\u00e4lv r\u00e4kna ut vilken typ en variabel ska vara utifr\u00e5n den data du skickar in i denna. F\u00f6r att deklarera en variabel i rust anv\u00e4nder du let . Vi g\u00f6r om det f\u00f6reg\u00e5ende exemplet, fast nu anv\u00e4nder vi en variabel f\u00f6r att spara hur m\u00e5nga br\u00f6der du har. mkdir example3-howManyBrothersVar cd example3-howManyBrothersVar touch howManyBrothersVar.rs Nu vill vi ist\u00e4llet specificera en variabel d\u00e4r vi sparar hur m\u00e5nga br\u00f6der du har och sedan anv\u00e4nder den h\u00e4r variabeln i printsatsen. fn main() { let brothers = 3; println!(\"I have {} brothers.\", brothers); } Testa att kompilera och k\u00f6ra detta rustc howManyBrothersVar.rs ./howManyBrothersVar Vi kan dock s\u00e4ga explicit till rust att en variabel ska vara en specifik typ. Om vi till exempel vet att vi beh\u00f6ver inte ha ett negativt antal br\u00f6der, och vi kommer aldrig ha mer \u00e4n 255 br\u00f6der. Is\u00e5fall kan vi spara antalet br\u00f6der i en unsigned (positiv) 8-bitars heltal; en u8 . I rust specificerar vi detta igenom att skriva ett kolon efter variabelnamnet och sedan vilken typ den ska vara (innan lika med tecknet). Testa att l\u00e4gga till detta fn main() { let brothers:u8 = 3; println!(\"I have {} brothers.\", brothers); } Kompilerar du och k\u00f6r detta, kommer du f\u00e5 samma resultat som f\u00f6rut. Skulle du nu dock v\u00e4lja att ha ett negativt antal br\u00f6der, kommer rust inte att l\u00e5ta dig kompilera d\u00e5 vi explicit sagt att denna variabel ska vara ett positivt 8-bitars tal. Testa att byta antalet br\u00f6der till -1 och kompilera. fn main() { let brothers:u8 = -1; println!(\"I have {} brothers.\", brothers); } Detta resulterar i f\u00f6ljande error | let brothers:u8 = -1; | ^^ | | | cannot apply unary operator `-` Allts\u00e5, operatorn - funkar inte p\u00e5 ett positivt heltal. Vill du l\u00e4sa mer om olika typer rekommenderar jag Tutorialspoint: Rust - Data Types .","title":"Exempel 3 - Variabler"},{"location":"sv/hardware/EmbeddedRust/#exempel-4-andra-variabler","text":"I de flesta programmeringsspr\u00e5k har du variabler som man kan \u00e4ndra v\u00e4rde p\u00e5, och variabler som du specificerat ska vara konstanta (dvs att dessa inte ska \u00e4ndras efter att de skapats). Detta \u00e4r dock inte fallet i rust. H\u00e4r m\u00e5ste du ist\u00e4llet specificera att en variabel ska g\u00e5 att \u00e4ndra p\u00e5. Vi testar med ett nytt exempel mkdir example4-howManyBrothersUpdate cd example4-howManyBrothersUpdate touch howManyBrothersUpdate.rs S\u00e4g att du har ett program d\u00e4r du sparar hur m\u00e5nga br\u00f6der du har och sedan printar ut detta antal. Men precis mellan det \u00f6gonblick programmet sparar antalet br\u00f6der och ska printa ut det, f\u00e5r du en ny bror (n\u00e5got av ett edge case men \u00e4nd\u00e5). Du vill d\u00e4rf\u00f6r \u00e4ndra antalet br\u00f6der du har efter att du skapat variabeln. fn main() { let brothers = 3; println!(\"I have {} brothers.\", brothers); brothers = 4; println!(\"I now have {} brothers.\", brothers); } F\u00f6rs\u00f6ker du kompilera detta f\u00e5r du f\u00f6ljande error | brothers = 4; | ^^^^^^^^^^^^ cannot assign twice to immutable variable Det den s\u00e4ger \u00e4r i princip att du f\u00f6rs\u00f6ker skriva \u00f6ver en immutable (konstant) variabel. Det man beh\u00f6ver g\u00f6ra i rust f\u00f6r att en variabel ska f\u00e5 \u00e4ndras, \u00e4r att specificera att den ska vara mutable (muterbar/m\u00f6jlig att \u00e4ndra). Detta g\u00f6r du med nyckelordet mut . Testa att l\u00e4gga till mut framf\u00f6r deklarationen av variabeln (mellan let och variabelnamnet) fn main() { let mut brothers = 3; println!(\"I have {} brothers.\", brothers); brothers = 4; println!(\"I now have {} brothers.\", brothers); } Nu lyckas programmet kompileras och k\u00f6ras. Variabler kan \u00e4ven deklareras som konstanta i rust, vilket ger dem en del mer restriktioner. \u00c4r du mer intresserad av det kan du l\u00e4sa Tutorialspoint: Rust - Constants .","title":"Exempel 4 - \u00c4ndra variabler"},{"location":"sv/hardware/EmbeddedRust/#exempel-5-strangar","text":"Rust g\u00f6r en distinkt skillnad mellan tv\u00e5 sorters str\u00e4ngar; litterala str\u00e4ngar och str\u00e4ngobjekt. En litteral str\u00e4ng \u00e4r en str\u00e4ng som definieras under kompileringen och sedan anv\u00e4nds av programmet, men den \u00e4ndras aldrig. Exempelvis om du har en meny i ditt program, d\u00e4r alla alternativ skrivs ut i en terminal. Programmet kommer aldrig att sj\u00e4lv \u00e4ndra sin meny, och d\u00e4rf\u00f6r kan denna str\u00e4ng vara statisk. Notera att detta inte betyder att du inte kan spara str\u00e4ngen i en variabel. Det kan du g\u00f6ra med f\u00f6ljande typ. fn main() { let name:&str = \"Josef\"; } Ett str\u00e4ngobjekt \u00e4r en str\u00e4ng som programmet sj\u00e4lv kommer att \u00e4ndra p\u00e5. F\u00f6r att f\u00e5 en s\u00e5n beh\u00f6ver du skapa str\u00e4ngobjektet med funktionen new() . fn main() { let mut buffer = String::new(); } F\u00f6r att \u00e4ndra str\u00e4ngen sedan finns en massa funktioner (kolla in Tutorialspoint: Rust - String ). I exempel kan vi anv\u00e4nda funktionen push_str() , f\u00f6r att fylla p\u00e5 str\u00e4ngobjektet med en litteral str\u00e4ng (allts\u00e5 en vi vet vad den inneh\u00e5ller under kompileringen) fn main() { let mut buffer = String::new(); buffer.push_str(\"Hello\"); }","title":"Exempel 5 - Str\u00e4ngar"},{"location":"sv/hardware/EmbeddedRust/#exempel-6-if-satser-loopar-och-sant","text":"Vi g\u00e5r snabbt igenom lite om if-satser, loopar och liknande. I rust beh\u00f6ver du inte ha parenteser runt if, for och while satser (p\u00e5 samma s\u00e4tt som i python) // En if-sats utan paranteser if i == 2 { // Do stuff } For loopar i rust ser ocks\u00e5 lite annorlunda ut. Du beh\u00f6ver inte deklarera en variabel som du sedan anv\u00e4nder f\u00f6r att loopa \u00f6ver. Rust kan lista ut det sj\u00e4lv. F\u00f6r att loopa fr\u00e5n ett v\u00e4rde till ett annat anv\u00e4nder du det som heter in och definierar en range som ska loopas \u00f6ver. H\u00e4r loopar vi fr\u00e5n 0 till, men inte med, 10 for j in 0..10 { // Do stuff } Vill du l\u00e4sa p\u00e5 mer, kan du se \u00f6ver Tutorialspoint: Rust - Loop","title":"Exempel 6 - If-satser, loopar och s\u00e5nt"},{"location":"sv/hardware/EmbeddedRust/#exempel-7-funktioner","text":"Funktioner i rust deklareras med nyckelordet fn . Man kan specificera vad funktionen retunerar med -> type . fn function_name(var1, var2) -> return_type { // Stuff return value; } Man kan ocks\u00e5 retunera ett v\u00e4rde i en funktion igenom att avsluta en funktion utan semikolon p\u00e5 slutet fn function_name(var1, var2) -> return_type { // The same thing as return value; value } Variabler f\u00f6r indata till funktionen kan man ocks\u00e5 specificera vilka typer det ska vara, p\u00e5 samma s\u00e4tt som n\u00e4r man deklarerar en variabel fn function_name(var1:u8, var2:&str) { // Stuff } F\u00f6rutom explicita v\u00e4rden kan referenser till variabler skickas in i funktioner (som pekare i C) fn main() { let mut no:i32 = 5; mutate_no_to_zero(&mut no); println!(\"The value of no is:{}\",no); } fn mutate_no_to_zero(param_no:&mut i32) { *param_no = 0; //de reference }","title":"Exempel 7 - Funktioner"},{"location":"sv/hardware/EmbeddedRust/#exempel-8-agandeskap","text":"En del som \u00e4r mer omst\u00e4ndligt i rust j\u00e4mf\u00f6rt med till exempel C eller python, \u00e4r att en variabel kan endast \u00e4gas av en funktion . H\u00e4r m\u00e5ste vi dock g\u00f6ra en distinkt skillnad mellan variabler som \u00e4r av en primitiv typ eller en som inte \u00e4r det. En variabel av en primitiv typ \u00e4r en enkel variabel som \u00e4r inbyggd i rust (typ). Detta inkluderar till exempel u8 , i8 , f8 , bool och char . Men n\u00e4r en variabel \u00e4r mer komplicerad, n\u00e5gonting som kanske kan vara olika storlekar eller en typ som du som anv\u00e4ndare skapad (en klass till exempel), \u00e4r detta inte en primitiv typ. I C++ kan du till exempel ha en funktion som tar in en referens till en variabel. H\u00e4r anv\u00e4nder vi en vektor d\u00e5 det inte \u00e4r en primitiv typ. Funktionen kan \u00e4ndra p\u00e5 datan i vektorn, som d\u00e5 ocks\u00e5 \u00e4ndras f\u00f6r datan d\u00e4r funktionen kallades // Funktion som tar in en referens f\u00f6r en vektor void bar(vector<int>& vect) { // Referera till variabeln \u00e4ndra n\u00e5got i den vec.push_back(3); } void foo() { // Skapa en vektor och s\u00e4tt tv\u00e5 av v\u00e4rdena i den vector<int> vect; vect.push_back(1); vect.push_back(2); // Kalla p\u00e5 bar med vektorn bar(vec); // Vi kan nu fortfarande anv\u00e4nda vektorn, // men storleken har \u00e4ndrats efter att bar // har kallats cout << vec.size() << endl; } I rust d\u00e4remot g\u00e4ller f\u00f6ljande - En variabel f\u00e5r bara \u00e4gas av en funktion i taget - Tv\u00e5 variabler f\u00e5r inte peka p\u00e5 samma minnesadress Det h\u00e4r p\u00e5verkar mest icke-primitiva typer. Lite senare g\u00e5r vi igenom hur det funkar f\u00f6r primitiva typer. Det betyder i princip att samma kod i rust inte hade fungerat. Det \u00e4r f\u00f6r att efter att funktionen bar kallas p\u00e5 med variabeln som indata, konsumeras denna variabel av funktionen och kan inte l\u00e4ngre anv\u00e4ndas. // Funktion som tar in en vektor och \u00e4ndrar p\u00e5 den fn bar(mut vec:Vec<u8>) { vec.push(3); } fn main() { // Skapa en vektor let mut vec:Vec<u8> = Vec::new(); vec.push(1); vec.push(2); // Kalla p\u00e5 bar med vektorn som indata bar(vec); // Detta fungerar inte, d\u00e5 vec har konsumerats // av funktionen bar println!(\"Size: {}\", vec.len()); } F\u00f6rs\u00f6ker vi kompilera det h\u00e4r f\u00e5r vi ett error som s\u00e4ger att variabeln vec har flyttats (och inte kunnat kopieras) och inte l\u00e4ngre \u00e4gs av mainfunktionen. D\u00e4rf\u00f6r kan den inte anv\u00e4ndas l\u00e4ngre | let mut vec:Vec<u8> = Vec::new(); | ------- move occurs because `vec` has type `Vec<u8>`, which does not implement the `Copy` trait ... | bar(vec); | --- value moved here ... | println!(\"Size: {}\", vec.len()); | ^^^^^^^^^ value borrowed here after move Det betyder ocks\u00e5 att om vi f\u00f6rs\u00f6ker att skapa en variabel och kopierar den, f\u00e5r vi inte l\u00e4ngre anv\u00e4nda den gamla variabeln fn main() { // Skapa en vektor let mut vec:Vec<u8> = Vec::new(); vec.push(1); vec.push(2); // Det h\u00e4r \u00e4r okej. \u00c4gandeskapet till vec ligger // nu i vec2 let vec2 = vec; // Det h\u00e4r g\u00e5r dock inte, d\u00e5 vec inte l\u00e4ngre // finns utan har konsumerats println!(\"Size: {}\", vec.len()); } Anledningen till detta handlar om hur v\u00e4rden sparas n\u00e4r programmet k\u00f6rs. Det finns beskrivet bra i Tutorialspoint: Rust - Ownership . Undantaget till detta \u00e4r dock om man anv\u00e4nder primitiva typer. Det \u00e4r f\u00f6r att rust vet hur dessa ska kopieras p\u00e5 ett bra s\u00e4tt. Hade f\u00f6reg\u00e5ende exempel ist\u00e4llet varit f\u00f6r variabler av typen u8 , r\u00e4knar rust ut att det den ska g\u00f6ra \u00e4r att kopiera inneh\u00e5llet i variabeln . fn main() { // Skapa en primitiv variabel let u1 = 1; // S\u00e4tt v\u00e4rdet p\u00e5 en annan variabel till den // f\u00f6rsta variabeln. Detta resulterar i att // v\u00e4rdet i den f\u00f6rsta variabeln s\u00e4tts p\u00e5 // den andra let u2 = u1; // D\u00e4rf\u00f6r fungerar detta, d\u00e5 u2 inte \u00e4r samma // variabel som u1, utan bara har samma v\u00e4rde println!(\"u1: {}\", u1); }","title":"Exempel 8 - \u00c4gandeskap"},{"location":"sv/hardware/EmbeddedRust/#exempel-9-lanande","text":"Man skulle kunna komma runt f\u00f6reg\u00e5ende exempel igenom att efter att funktionen k\u00f6rts, retunera variabeln och spara den i en ny variabel. // Funktion som tar in en vektor, \u00e4ndrar p\u00e5 den och // sedan retunerar den fn bar(mut vec:Vec<u8>) -> Vec<u8> { vec.push(3); return vec; } fn main() { // Skapa en vektor let mut vec:Vec<u8> = Vec::new(); vec.push(1); vec.push(2); // Kalla p\u00e5 bar med vektorn som indata, och skapa // en ny variabel med vektorn som funktionen // retunerar let vec2 = bar(vec); // Detta fungerar d\u00e5 vec2 typ \u00e4r en ny vektor println!(\"Size: {}\", vec2.len()); } Det blir dock l\u00e4tt omst\u00e4ndligt. D\u00e4rf\u00f6r kan en funktion \u00e4ven l\u00e5na en variabel. Den f\u00e5r en l\u00e5nad variabel som indata, d\u00e4r den kan \u00e4ndra p\u00e5 saker. Men n\u00e4r funktionen k\u00f6rts klart l\u00e4mnas variabeln tillbaks. Detta g\u00f6rs i rust igenom att referera till variabeln med ett & // Funktion som l\u00e5nar en vektor. Notera & innan variabeltypen fn bar(vec:&Vec<u8>) { println!(\"Size from a function: {}\", vec.len()); } fn main() { // Skapa en vektor let mut vec:Vec<u8> = Vec::new(); vec.push(1); vec.push(2); // Skicka in en referens till vec, vilket l\u00e5ter bar l\u00e5na den bar(&vec); // Vi har fortfarande kvar vec och kan anv\u00e4nda den println!(\"Size: {}\", vec.len()); } Notera dock att vi inte kan \u00e4ndra p\u00e5 variabeln i det h\u00e4r fallet, utan endast anv\u00e4nda den. F\u00f6r att variabeln ska kunna \u00e4ndras m\u00e5ste vi specificera att den ska vara muterbar b\u00e5de i funktionsdeklarationen och i funktionskallet . Detta g\u00f6rs med nyckelordet &mut // Funktion som l\u00e5nar en vektor och har r\u00e4tt att \u00e4ndra p\u00e5 den. // Notera &mut innan variabeltypen fn bar(vec:&mut Vec<u8>) { // \u00c4ndrar ineh\u00e5llet i vec. Utdatan sparas i en // skr\u00e4pvariabel, d\u00e5 rust annars genererar en // varning ang\u00e5ende utdata fr\u00e5n l\u00e5nade variabler let _ = &vec.push(3); println!(\"Size from a function: {}\", vec.len()); } fn main() { // Skapa en vektor let mut vec:Vec<u8> = Vec::new(); vec.push(1); vec.push(2); // Skicka in en referens till vec, vilket l\u00e5ter bar l\u00e5na den // och \u00e4ndra p\u00e5 den. Notera att vi explicit specificerar att // variabeln ska vara en muterbar referens bar(&mut vec); // Vi har fortfarande kvar vec och kan anv\u00e4nda den. Nu har den // dock \u00e4ndrats av funktionen println!(\"Size: {}\", vec.len()); }","title":"Exempel 9 - L\u00e5nande"},{"location":"sv/hardware/EmbeddedRust/#cargo","text":"I rust har vi det som kallas crates , vilket \u00e4r som bibliotek i C. Det som dock \u00e4r smidigt mer rust \u00e4r att installationen och versionshantering av crates sk\u00f6ts av pakethanterare: Cargo . Cargo \u00e4r ganska likt pip om du anv\u00e4nt det. Skillnaden \u00e4r att cargo ocks\u00e5 l\u00f6ser virtuella milj\u00f6er (typ) och byggandet av projekt sj\u00e4lv. Cargo h\u00e4nger ocks\u00e5 med i rustup, vilket \u00e4r smidigt.","title":"Cargo"},{"location":"sv/hardware/EmbeddedRust/#rustup-vs-cargo","text":"H\u00e4r ser du vad som \u00e4r skillnaden mellan rustup och cargo H\u00e4r \u00e4r en till guide som ocks\u00e5 g\u00e5r igenom hur man kommer ig\u00e5ng med rust Meduim: Rust - A Beginner Cheat Sheet F\u00f6r mer information om crates kan du kolla in Tutorialspoint: Rust - Modules","title":"Rustup vs Cargo"},{"location":"sv/hardware/EmbeddedRust/#skapa-ett-projekt","text":"N\u00e4r du vill skapa ett projekt i rust anv\u00e4nder du cargo. Du kan testa igenom att k\u00f6ra f\u00f6ljande, som kommer att skapa mappen cargo_test cargo new cargo_test Det cargo g\u00f6r \u00e4r att den s\u00e4tter upp en mappstruktur f\u00f6r dig och skapar de filer som kr\u00e4vs f\u00f6r att b\u00f6rja. S\u00e5 h\u00e4r ser mappen ut n\u00e4r du skapar den \u251c\u2500\u2500 Cargo.toml \u2514\u2500\u2500 src \u2514\u2500\u2500 main.rs Du f\u00e5r en src mapp d\u00e4r all din kod ska ligga och i den ligger main.rs , vilket \u00e4r den fil programmet kommer leta efter funktionen main i. I main.rs finns redan ett hello world exempel, s\u00e5 vi ska testa att bygga det. Det fina med att ha skapat projektet p\u00e5 det h\u00e4r s\u00e4ttet med cargo \u00e4r att vi kan anv\u00e4nda cargo f\u00f6r att bygga projektet. Om du \u00e4r i mappen cargo_test kan du bara k\u00f6ra cargo build f\u00f6r att kompilera programmet och cargo run f\u00f6r att k\u00f6ra det. cargo build cargo run Cargo bygger d\u00e5 programmet och k\u00f6r det, vilket printar ut Hello, world! p\u00e5 terminalen. Efter att du byggt programmet ser ditt projekt ut n\u00e5got s\u00e5h\u00e4r \u251c\u2500\u2500 Cargo.lock \u251c\u2500\u2500 Cargo.toml \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 main.rs \u2514\u2500\u2500 target \u251c\u2500\u2500 CACHEDIR.TAG \u2514\u2500\u2500 debug \u251c\u2500\u2500 build \u251c\u2500\u2500 cargo_test \u251c\u2500\u2500 cargo_test.d \u251c\u2500\u2500 deps \u2502 \u251c\u2500\u2500 cargo_test-99e382143f4d3aca \u2502 \u2514\u2500\u2500 cargo_test-99e382143f4d3aca.d \u251c\u2500\u2500 examples \u2514\u2500\u2500 incremental Det som \u00e4r v\u00e4sentligt h\u00e4r \u00e4r filen target/debug/cargo_test . Det \u00e4r ditt program! Du kan faktiskt k\u00f6ra den manuellt om du vill testa ./target/debug/cargo_test","title":"Skapa ett projekt"},{"location":"sv/hardware/EmbeddedRust/#debug-eller-release","text":"Rust kan bygga ditt program p\u00e5 lite olika s\u00e4tt. Som standard \u00e4r att programmet byggs i debug , vilket betyder att kompilatorn l\u00e4gger till en del saker f\u00f6r att g\u00f6ra fels\u00f6kning lite enklare. Det \u00e4r d\u00e4rf\u00f6r ditt program hamnar i mappen debug . Om du en dag vill bygga en version av ditt program som ska anv\u00e4ndas kan du v\u00e4lja att bygga det i release l\u00e4get. Rust kommer d\u00e5 att optimera och g\u00f6ra programmet mindre. cargo build --release cargo run --release","title":"Debug eller Release"},{"location":"sv/hardware/EmbeddedRust/#cargotoml-och-cargolock","text":"N\u00e4r du skapar ett nytt projekt genereras en fil som heter Cargo.toml . Sedan n\u00e4r du kompilerar projektet genereras en till fil som heter Cargo.lock . Dessa filer beskriver vilka versioner av saker som projektet anv\u00e4nder. Cargo.toml \u00e4r den fil som du som programmerare skriver i. D\u00e4r kan du specificera vad ditt program heter, vilken version den \u00e4r p\u00e5 och vilka \u00f6vriga crates ditt program beh\u00f6ver anv\u00e4nda f\u00f6r att kunna k\u00f6ra. Cargo.lock skapas sedan automatiskt n\u00e4r du bygger ditt projekt. Den specificerar exakt vilka versioner av olika crates som anv\u00e4ndes n\u00e4r du kompilerade ditt program. Den l\u00e5ser allts\u00e5 versionerna. Detta g\u00f6r att om en annan programmerare sedan bygger ditt projekt, kommer han f\u00e5 de exakta versionerna av de crates som du anv\u00e4nde, vilket betyder att ditt program beter sig likadant f\u00f6r honom. Du kan testa att l\u00e4gga till en modul i din Cargo.toml fil. Under [dependencies] kan du l\u00e4gga f\u00f6ljande [dependencies] regex = { git = \"https://github.com/rust-lang/regex.git\" } K\u00f6r du nu cargo build kommer den b\u00f6rja att ladda ner regex craten fr\u00e5n github, och sedan bygga ditt projekt. Kollar du nu i Cargo.lock kommer du se att den har lagt till en massa saker som har med regex att g\u00f6ra. Det fina \u00e4r att du aldrig beh\u00f6ver \u00e4ndra i den filen sj\u00e4lv, bara se till att pusha den om du laddar upp ditt projekt med git.","title":"Cargo.toml och Cargo.lock"},{"location":"sv/hardware/EmbeddedRust/#vs-code-introduktion","text":"Geeks for Geeks - How to Setup Rust in VSCode? VS Code \u00e4r en IDE skapad av Microsoft. Den \u00e4r dock nu open-source. VS Code har bra support f\u00f6r att l\u00e4gga till moduler, vilket l\u00e5ter en enkelt anv\u00e4nda den f\u00f6r olika programmeringsspr\u00e5k.","title":"VS Code - Introduktion"},{"location":"sv/hardware/EmbeddedRust/#vs-code-installation-manjaro","text":"sudo pacman -S vscode F\u00f6r att sedan k\u00f6ra VS Code k\u00f6r du programmet som heter code .","title":"VS Code installation - Manjaro"},{"location":"sv/hardware/EmbeddedRust/#rust-plugin","text":"I VS Code kan du installera pluginet rust-analyzer . Den kommer att analysera din kod, ge dig code completion och hitta varningar och errors. G\u00e5 till Extentions i v\u00e4nsterpanelen i VS Code. V\u00e4l d\u00e4r kan du s\u00f6ka upp rust-analyzer och installera den F\u00f6r att debugga kod kan du ocks\u00e5 installera CodeLLDB","title":"Rust plugin"},{"location":"sv/hardware/EmbeddedRust/#workspaces","text":"I VS Code har du det som kallas workspaces . Det kan beskrivas som den mapp d\u00e4r din kod ligger. Testa att \u00f6ppna testprojektet igenom att g\u00e5 till File > Open Folder... och v\u00e4lja cargo_test mappen. Nu ska mappen dyka upp p\u00e5 v\u00e4nstersidan, med alla submappar och filer. Testa att \u00f6ppna src/main.rs . D\u00e4r har du din hello world kod, och allt \u00e4r f\u00e4rgat korrekt vilket inneb\u00e4r att VS Code fattar att det ska vara rust kod. Testa att skriva in ett av de icke-fungerande exemplen som finns under [[#Introduktion till rust]] och spara main.rs . fn main() { let brothers:u8 = -1; println!(\"I have {} brothers.\", brothers); } Nu kommer du f\u00e5 ett r\u00f6tt str\u00e4ck under -1 . Om du hovrar musen \u00f6ver str\u00e4cket f\u00e5r du en hj\u00e4lpruta som beskriver varf\u00f6r din kod \u00e4r fel.","title":"Workspaces"},{"location":"sv/hardware/EmbeddedRust/#kompilera-och-debugga-i-vs-code","text":"VS Code har en integrerad terminal i sig, vilken man kan anv\u00e4nda f\u00f6r att manuellt bygga och k\u00f6ra ditt program. G\u00e5r till Terminal > New Terminal f\u00f6r att f\u00e5 upp den. Det kommer \u00f6ppna en terminal som befinner sig i workspace mappen. Testa att bygga och k\u00f6ra din kod i den. cargo build cargo run Det \u00e4r helt okej, men det smidiga med VS Code \u00e4r att du manuellt kan specificera vad VS Code ska g\u00f6ra n\u00e4r du trycker p\u00e5 \"Run and Debug\". G\u00e5 till menyn \"Run and Debug\" D\u00e4r kan du v\u00e4lja alternativet create a launch.json file ![](/img/hardware/EmbeddedRust/Rust 2022-12-15 20.47.29.excalidraw} Det kommer ge dig ett f\u00f6nster d\u00e4r det st\u00e5r att du har en Cargo.toml fil i ditt projekt, och det fr\u00e5gar om du vill generera en fil fr\u00e5n den. V\u00e4lj Yes . Den kommer generera en fil kallad .vscode/launch.json . Det \u00e4r en fil som specificerar hur VS Code ska agera n\u00e4r du v\u00e4ljer att bygga ditt projekt. Det autogenererade ska funka f\u00f6r v\u00e5rt exempel. Testa att bygga och k\u00f6ra projektet igenom att trycka p\u00e5 knappen RUN AND DEBUG Den kommer att bygga och k\u00f6ra ditt program. Du kan se hur saker h\u00e4nder nere i terminalen. V\u00e4ljer du fliken Terminal b\u00f6r du ocks\u00e5 se att programmet printade \"Hello, world!\" Nu kan du testa att debugga ditt program. Om du klickar bredvid din kod, till v\u00e4nster om ett radnummer i din mainfunktion. D\u00e5 f\u00e5r du upp en liten r\u00f6d cirkel. Om du nu k\u00f6r RUN AND DEBUG kommer ditt program att starta, men det pausar ditt program och s\u00e4tter det i debuggl\u00e4ge. Du kan l\u00e4sa p\u00e5 mer om hur debugging funkar p\u00e5 VS Codes sida .","title":"Kompilera och debugga i VS Code"},{"location":"sv/hardware/EmbeddedRust/#embedded-rust","text":"H\u00e4r \u00e4r ett par bra tutorials p\u00e5 det h\u00e4r: Jonathan Klimt - Rust on STM32: Getting started och Daschl writes. sometimes - Getting Started with the nRF52840 in Rust Ist\u00e4llet f\u00f6r att k\u00f6ra v\u00e5rt program p\u00e5 en laptop kommer du antagligen vilja k\u00f6ra den p\u00e5 ett devboard, vilket kallas embedded . Det finns ett par problem med detta. Processorn i din dator \u00e4r inte densamma som processorn p\u00e5 ditt devboard. Den l\u00e4ser inte samma maskinkod som din dator, utan \u00e4r byggd med en annan arkitektur . Processorn som sitter i din dator \u00e4r antagligen byggd p\u00e5 den arkitekturen som heter x86 , medans processorn p\u00e5 din devboard \u00e4r byggt p\u00e5 arkitekturen ARM . Sedan m\u00e5ste du ocks\u00e5 lyckats f\u00e5 programmet till minnet p\u00e5 din devboard. Det \u00e4r inte som ett usbminne, du kan inte bara flytta \u00f6ver ett program till den, utan du m\u00e5ste skriva till dens minne. F\u00f6r att komma \u00f6ver det f\u00f6rsta problemet beh\u00f6ver din kod korskompileras (cross-compile). Det betyder att du har en kompilator p\u00e5 din dator som bygger ett program till en annan arkitektur. Det blir allts\u00e5 ett program som inte kommer kunna k\u00f6ras p\u00e5 din dator, men det kommer kunna k\u00f6ras p\u00e5 ditt devboard. I rust kan du ganska enkelt installera en korskompilator med rustup . Det du g\u00f6r \u00e4r att installera ett annat toolchain . B\u00f6rja med att skapa ett nytt projekt som vi nu kallar embedded_test . F\u00f6rslagsvis kan du g\u00f6ra det i samma mapp som cargo_test ligger cargo new embedded_test cd embedded_test Sedan vill vi installera toolchainen som kr\u00e4vs f\u00f6r ARM processorn rustup target install thumbv7m-none-eabi F\u00f6r att sedan skriva till devboardens minne g\u00f6r du det som heter att flasha minnet. Du kan installera en cargo modul just f\u00f6r att g\u00f6ra detta. cargo install cargo-flash Nu beh\u00f6ver du specificera att det h\u00e4r projektet ska kompileras f\u00f6r en annan arkitektur. Detta g\u00f6r du igenom att skapa en configfil. I mappen embedded_test kan du k\u00f6ra mkdir .cargo cd .cargo touch config.toml Sedan kan du redigera din configfil. Mappen .cargo \u00e4r en dold mapp, s\u00e5 det kan vara s\u00e5 att du m\u00e5ste specificera att du vill se dolda filer i din filhanterare f\u00f6r att kunna g\u00e5 in i den. I filen config kan du l\u00e4gga till # Byggargument [build] # D\u00e5 att v\u00e5rt target, allts\u00e5 devboardet, \u00e4r en ARM # processor vill vi att projektet ska korskompileras # till ARM target = \"thumbv7em-none-eabi\" # Lite specifikationer f\u00f6r vilken runner som ska anv\u00e4ndas n\u00e4r vi k\u00f6r cargo run [target.'cfg(all(target_arch = \"arm\", target_os = \"none\"))'] runner = \"probe-run --chip nRF52840_xxAA\" rustflags = [ # Adress specifikationer \"-C\", \"link-arg=--nmagic\", # Linker \"-C\", \"link-arg=-Tlink.x\", ] Efter det beh\u00f6ver vi ett linker skript . Det skriptet specificerar hur minnet p\u00e5 din devboard ska se ut. I mappen embedded_test kan du skapa filen memory.x och l\u00e4gga till MEMORY { /* Flashminnet startar p\u00e5 address 0x00000000 och \u00e4r storleken 64kB*/ FLASH : ORIGIN = 0x00000000, LENGTH = 1M /* Ramminnet startar p\u00e5 address 0x20000000 och \u00e4r storleken 20kB*/ RAM : ORIGIN = 0x20000000, LENGTH = 256K } Nu beh\u00f6ver du \u00e4ndra i filen Cargo.toml f\u00f6r att specificera hur programmet ska byggas. \u00d6ppna den och l\u00e4gg till efter [dependencies] [package] name = \"embedded_test\" version = \"0.1.0\" edition = \"2021\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html # Containers som kr\u00e4vs f\u00f6r att bygga projektet [dependencies] # Tillg\u00e5ng till generiska ARMgrejer, samt att explicit kunna k\u00f6ra assemblyinstruktioner cortex-m = { version = \"^0.7.6\", features = [\"inline-asm\"] } # Mer ARM grejer som specificerar hur programmet ska startas cortex-m-rt = \"0.6.12\" # Till\u00e5t printing i embedded kod rtt-target = { version = \"0.3.0\", features = [\"cortex-m\"] } # HAL interface som fungerar som mellan lager f\u00f6r din kod och NRF52840 processorn, s\u00e5 du # inte beh\u00f6ver lista ut vilka register som g\u00f6r vad nrf52840-hal = { version = \"0.16.0\", features = [\"rt\"] } # Panic handling f\u00f6r n\u00e4r din kod kraschar panic-rtt-target = { version = \"0.1.2\", features = [\"cortex-m\"] } # Specifikationer om hur programmet ska kompileras f\u00f6r release mode [profile.release] # Maximera optimering f\u00f6r storlek, d\u00e5 vi inte l\u00e4ngre har s\u00e5 mycket minne opt-level = 'z' # Link-time-optimizations som kommer hj\u00e4lpa mer med optimering lto = true","title":"Embedded rust"},{"location":"sv/hardware/EmbeddedRust/#embedded-kod","text":"Nu ska vi skriva lite kod. I din mainfil src/main.rs kan du skriva f\u00f6ljande hello world program // Main fungerar inte riktigt p\u00e5 samma s\u00e4tt i embedded // rust, s\u00e5 vi m\u00e5ste specificera att den inte ska // anv\u00e4nda orginella main #![no_main] // Vi har heller inte standardbiblioteket f\u00f6r att printa #![no_std] // Vi importerar funktionaliteten fr\u00e5n v\u00e5r HAL use nrf52840_hal as _; // Vi importerar ocks\u00e5 ett macro f\u00f6r att kunna printa use rtt_target::{rtt_init_print, rprintln}; #[cortex_m_rt::entry] fn main() -> ! { // Initialisera printing rtt_init_print!(); // Notera att vi anv\u00e4nder macrot rprintln och inte println rprintln!(\"Hello, World!\"); exit(); } // H\u00e4r specificerar vi vad som ska h\u00e4nda n\u00e4r programmet kraschar #[panic_handler] fn panic(_info: &core::panic::PanicInfo) -> ! { rprintln!(\"Panic!\"); exit(); } // H\u00e4r har vi en exitfunktion. Den beh\u00f6vs f\u00f6r att processorn inte ska forts\u00e4tta k\u00f6ra // icke-existerande instruktioner efter v\u00e5rt program pub fn exit() -> ! { loop { cortex_m::asm::bkpt(); } } Notera att vi har lite extra grejer fr\u00e5n det hello world exemplet vi gjorde f\u00f6r dator. Vi b\u00f6rjar med att st\u00e4nga av n\u00e5gra funktioner i rust. #![no_main] specificerar att ditt program inte ska starta fr\u00e5n main, utan ska starta p\u00e5 ett annat embeddedst\u00e4lle. Sedan refererar vi till funktionen main som en startpunkt fr\u00e5n vilken embeddedgrejerna ska starta din kod. Vi har heller inte tillg\u00e5ng till standardbiblioteket , vilket l\u00e5ter dig till exempel printa saker. D\u00e4rf\u00f6r l\u00e4gger vi \u00e4ven till #![no_std] . Sedan importera lite extra funktionalitet. nrf52840_hal \u00e4r ett mellanlager mellan din kod och h\u00e5rdvaran, vilket \u00e4r en NRF52840 processor. Med den slipper du h\u00e5lla reda p\u00e5 register och s\u00e5nt. rtt_target::rprintln implementerar ett nytt macro f\u00f6r att printa: rprintln . Den funkar precis som println , men kan k\u00f6ras p\u00e5 en embeddedenhet. Sedan specificerar vi en entry point , vilket \u00e4r d\u00e4r din kod kommer att b\u00f6rja. I v\u00e5rt fall heter funktionen \u00e4nd\u00e5 main , men du kan d\u00f6pa den till vad som helst. I mainfunktionen anv\u00e4nder vi det nya macrot rprintln f\u00f6r att skriva ut text. Sedan kallar vi p\u00e5 funktionen exit . Efter det har vi en till funktion som heter panic . Den registreras som vad som ska k\u00f6ras om din kod kraschar. I v\u00e5rt fall printar vi bara ett meddelande och kallar p\u00e5 exit , men det man ocks\u00e5 skulle kunna g\u00f6ra h\u00e4r \u00e4r att man st\u00e4nger ner externa komponenter korrekt eller dumpar massa info i en loggfil. Efter det har vi en funktion som heter exit . Det \u00e4r en funktion vi sj\u00e4lva kallar p\u00e5 n\u00e4r vi vill avsluta programmet. Anledningen till att vi g\u00f6r det \u00e4r f\u00f6r att din embeddedenhet inte kommer avsluta p\u00e5 samma s\u00e4tt som ett program p\u00e5 din laptop. K\u00f6r du ett program p\u00e5 din dator kommer en ny process att startas, ditt program k\u00f6rs och sen avslutas processen. Datorn forts\u00e4tter sedan med allt den h\u00e5ller p\u00e5 med f\u00f6r att k\u00f6ra ditt operativsystem. Din embeddedenhet d\u00e4remot, kommer inte bara sluta k\u00f6ra kod efter att ditt program tar slut. Den kommer att forts\u00e4tta plocka instruktioner fr\u00e5n minnet. Dessa \u00e4r inte saker du har lagt d\u00e4r, utan kan vara vadsomhelst. Det vill vi inte att den ska g\u00f6ra, f\u00f6r d\u00e5 kan vad som helst h\u00e4nda. D\u00e4rf\u00f6r har vi funktionen exit som kommer att s\u00e4tta processorn i en evighetsloop. Vi l\u00e4gger ocks\u00e5 till att den ska placera en breakpoint d\u00e4r, f\u00f6r om vi vill debugga. Du kan nu bygga din kod. F\u00f6rutsatt att allt \u00e4r gjort korrekt, kommer du inte f\u00e5 n\u00e5gra error. cargo build","title":"Embedded kod"},{"location":"sv/hardware/EmbeddedRust/#flasha-din-kod","text":"Nu n\u00e4r du lyckats bygga ditt projekt \u00e4r det dags att flasha din kod till ditt devboard. F\u00f6r det beh\u00f6ver du containern probe-run cargo install probe-run Du kommer ocks\u00e5 beh\u00f6va ett verktyg fr\u00e5n Nordic Semiconductors f\u00f6r att interagera med devboarden. Det heter nrf5x-command-line-tools","title":"Flasha din kod"},{"location":"sv/hardware/EmbeddedRust/#nrf-tools-installation-manjaro-med-yay","text":"yay nrf5x-command-line-tools","title":"NRF tools installation - Manjaro med yay"},{"location":"sv/hardware/EmbeddedRust/#nrf-tools-installation-manjaro-med-aur","text":"git clone https://aur.archlinux.org/nrf5x-command-line-tools.git cd nrf5x-command-line-tools makepkg -si F\u00f6r att kunna flasha kod till ditt devboard m\u00e5ste det l\u00e5sas upp. Det \u00e4r d\u00e4rf\u00f6r vi beh\u00f6ver NRF tools . K\u00f6r kommandot nrfjprog --recover Nu n\u00e4r du l\u00e5st upp ditt devboard och konfigurerat i .cargo/config att det som ska h\u00e4nda n\u00e4r du k\u00f6r cargo run \u00e4r att den ska anv\u00e4nda probe-run f\u00f6r att flasha koden till ditt devboard, kan du nu k\u00f6ra koden cargo run Om allt g\u00e5tt som det ska b\u00f6r det resultera i f\u00f6ljande Finished dev [unoptimized + debuginfo] target(s) in 0.01s Running `probe-run --chip nRF52840_xxAA target/thumbv7em-none-eabi/debug/embedded_test` (HOST) INFO flashing program (3 pages / 12.00 KiB) (HOST) INFO success! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Hello, World! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 (HOST) INFO device halted without error Ditt devboard k\u00f6r allts\u00e5 hello world koden och skickar hello world till din dator, som sedan printar det i din terminal.","title":"NRF tools installation - Manjaro med AUR"},{"location":"sv/hardware/EmbeddedRust/#debugging-i-embedded-rust","text":"Att kunna printa saker r\u00e4cker ofta f\u00f6r att testa enkla saker i ett program, men ibland kan det kr\u00e4vas lite mer kontroll \u00f6ver hur en embeddedplattform k\u00f6rs. I de fallen vill man ha en debugger f\u00f6r att kunna stoppa k\u00f6rningen av kod och kolla p\u00e5 alla variabler. Problemet med det s\u00e4tt vi satt upp exempelprojektet nu \u00e4r att probe-run inte har den funktionaliteten. I det h\u00e4r exemplet kommer vi d\u00e4rf\u00f6r s\u00e4tta upp en gdb instans som k\u00f6r p\u00e5 din dator och komunicerar med embeddedenheten. F\u00f6ljande exempel f\u00f6ljer lite vagt ferrous systems - Graphical Debugging with Embedded Rust Till att b\u00f6rja med kan du skapa ett nytt projekt i samma mapp som embedded_test som heter gdb_test . cargo new gdb_test cd gdb_test Kopiera \u00f6ver lite filer fr\u00e5n embedded_test cp ../embedded_test/Cargo.toml ./Cargo.toml cp ../embedded_test/src/main.rs src/main.rs cp ../embedded_test/memory.x memory.x cp -r ../embedded_test/.cargo ./.cargo Redigera Cargo.toml och byt variabeln name fr\u00e5n \"embedded_test\" till \"gdb_test\" . Nu kan vi b\u00f6rja med att s\u00e4tta upp debuggern. Exakt hur allt fungerar \u00e4r lite komplicerat, men i grunden beh\u00f6ver vi tre komponenter. Cargo GDB OpenOCD Cargo har vi redan anv\u00e4nt f\u00f6r att specificera hur vi ska kompilera projektet och vad som ska h\u00e4nda n\u00e4r vi k\u00f6r cargo run .","title":"Debugging i embedded rust"},{"location":"sv/hardware/EmbeddedRust/#gdb","text":"GDB \u00e4r det som kallas en debugger . Den ansvarar, p\u00e5 samma s\u00e4tt som probe-run, f\u00f6r att skicka ett program som cargo har kompilerat till OpenOCD och sedan f\u00f6r att specificera vart programmet ska stanna. GDB l\u00e5ter oss ocks\u00e5 titta p\u00e5 vad som h\u00e4nder p\u00e5 enheten fr\u00e5n din laptop. GDB \u00f6vers\u00e4tter i princip de instruktionerna som k\u00f6rs i ett program till l\u00e4sbar kod. I vanliga fall kommer dessa instruktioner vara i maskinspr\u00e5ket X86 , vilket \u00e4r vad din dator k\u00f6r. Men det kommer inte fungera f\u00f6r kod som k\u00f6rs p\u00e5 det inbyggda systemet, som \u00e4r byggt med en ARM arkitektur. P\u00e5 samma s\u00e4tt som vi tidigare beh\u00f6vde en korskompilator, beh\u00f6ver vi nu en GDB version som kan k\u00f6ras p\u00e5 din dator men l\u00e4ser ARM kod. F\u00f6r detta anv\u00e4nder vi GDB versionen arm-none-eabi-gdb .","title":"GDB"},{"location":"sv/hardware/EmbeddedRust/#gdb-installation-manjaro-med-pacman","text":"sudo pacman -S arm-none-eabi-gdb","title":"GDB installation - Manjaro med Pacman"},{"location":"sv/hardware/EmbeddedRust/#konfigurera-gdb","text":"Vi kan konfigurera GDB med en konfigfil. Skapa filen debug.gdb och l\u00e4gg till # Koppla till GDB servern som k\u00f6r lokalt p\u00e5 port 3333 (openocd) target remote :3333 # Flasha enheten med det program som specificerats i argumentet till gdb load # Resetta enheten (openocd) monitor reset halt # Starta exekvering av programmet continue","title":"Konfigurera GDB"},{"location":"sv/hardware/EmbeddedRust/#openocd","text":"OpenOCD \u00e4r det som kallas en embedded debug server . Det \u00e4r som ett mellanlager mellan GDB och enheten som koden k\u00f6rs p\u00e5. Man kan s\u00e4ga att den ansvarar f\u00f6r att ta emot program och instruktioner fr\u00e5n GDB och sedan komunicera dessa till enheten. N\u00e4r vi k\u00f6r OpenOCD startar den en lokal server p\u00e5 din dator som GDB kan koppla upp sig till via port 3333.","title":"OpenOCD"},{"location":"sv/hardware/EmbeddedRust/#openocd-installation-manjaro-med-pacman","text":"sudo pacman -S openocd","title":"OpenOCD installation - Manjaro med Pacman"},{"location":"sv/hardware/EmbeddedRust/#konfigurera-openocd","text":"Skapa filen debug_openocd.cfg och l\u00e4gg till # OpenOCD konfiguration. Specificerar att OpenOCD ska hitta en jlink interface till en nrf52 enhet # och skicka data \u00f6ver den source [find interface/jlink.cfg] transport select swd source [find target/nrf52.cfg]","title":"Konfigurera OpenOCD"},{"location":"sv/hardware/EmbeddedRust/#rust-runners","text":"En runner i rust syftar p\u00e5 det komandot som ska k\u00f6ras n\u00e4r en anv\u00e4ndare k\u00f6r cargo run . I f\u00f6reg\u00e5ende exemplet s\u00e5 anv\u00e4nde vi runnern som heter probe-run . Den \u00e4r enkel att s\u00e4tta upp, men l\u00e5ter oss inte debugga en enhet riktigt, utan endast printa fr\u00e5n den. Vi vill nu ist\u00e4llet anv\u00e4nda ett komando f\u00f6r att k\u00f6ra GDB med konfigfilen som vi just skapat. Redigera .cargo/config.toml och ers\u00e4tt raden runner = \"probe-run --chip nRF52840_xxAA\" med runner = \"arm-none-eabi-gdb -q -x debug.gdb\"","title":"Rust runners"},{"location":"sv/hardware/EmbeddedRust/#forsta-testet","text":"Nu \u00e4r alla bitar p\u00e5 plats f\u00f6r att b\u00f6rja testa att debugga. Vi g\u00f6r f\u00f6rsta exemplet i en terminal, men senare ska vi integrera allt med VSCode. D\u00e4rf\u00f6r ser det lite omst\u00e4ndigt ut nu. B\u00f6rja med att starta en terminal, g\u00e5 till projektmappen gdb_test och k\u00f6r openocd -f debug_openocd.cfg Flaggan -f specificerar att OpenOCD ska anv\u00e4nda filen debug_openocd.cfg som vi skapade tidigare. Om allt g\u00e5tt som det ska, b\u00f6r OpenOCD printa ut Open On-Chip Debugger 0.11.0 Licensed under GNU GPL v2 For bug reports, read http://openocd.org/doc/doxygen/bugs.html Info : Listening on port 6666 for tcl connections Info : Listening on port 4444 for telnet connections Info : J-Link OB-nRF5340-NordicSemi compiled Nov 7 2022 16:22:01 Info : Hardware version: 1.00 Info : VTarget = 3.300 V Info : clock speed 1000 kHz Info : SWD DPIDR 0x2ba01477 Info : nrf52.cpu: hardware has 6 breakpoints, 4 watchpoints Info : starting gdb server for nrf52.cpu on 3333 Info : Listening on port 3333 for gdb connections Allt detta betyder att OpenOCD hittat en OB-nRF5340-NordicSemi enhet \u00f6ver ett J-Link interface. Sedan startar den GDB servern och v\u00e4ntar p\u00e5 att en GDB instans ska koppla upp sig. \u00d6ppna en annan terminal, g\u00e5 till projektmappen gdb_test och k\u00f6r cargo run Den kommer printa ut att den k\u00f6r kommandot arm-none-eabi-gdb -q -x debug.gdb target/thumbv7em-none-eabi/debug/gdb_test , vilket \u00e4r den runnern vi specificerat tidigare. En GDB instans startas och printar ut f\u00f6ljande Reading symbols from target/thumbv7em-none-eabi/debug/gdb_test... cortex_m::asm::inline::__bkpt () at /home/josef/.cargo/registry/src/github.com-1ecc6299db9ec823/cortex-m-0.7.6/src/../asm/inline.rs:14 14 asm!(\"bkpt\", options(nomem, nostack, preserves_flags)); Loading section .vector_table, size 0x100 lma 0x0 Loading section .text, size 0x2030 lma 0x100 Loading section .rodata, size 0x680 lma 0x2130 Start address 0x00000100, load size 10160 Transfer rate: 15 KB/sec, 3386 bytes/write. target halted due to debug-request, current mode: Thread xPSR: 0x01000000 pc: 0x00000100 msp: 0x20040000 Program received signal SIGTRAP, Trace/breakpoint trap. gdb_test::exit () at src/main.rs:34 34 cortex_m::asm::bkpt(); (gdb) Det den s\u00e4ger i princip \u00e4r att den kopplar ihop sig till OpenOCD instansen, resetar enheten som OpenOCD \u00e4r kopplad till och startar programmet. Sedan stoppar den n\u00e4r den kommer fram till rad 34 i funktionen exit . G\u00e5r vi tillbaks till hello world koden som vi skrev tidigare och kollar p\u00e5 funktionen exit kan vi faktiskt se d\u00e4r varf\u00f6r: Exit kallar p\u00e5 en assemblyinstruktion vid namn bkpt som st\u00e5r f\u00f6r breakpoint . Det syftar p\u00e5 att en debugger som kommer till den instruktionen ska stanna programmet f\u00f6r att man ska kunna se p\u00e5 koden. Du har nu lyckats debugga din kod! Om du g\u00e5r tillbaks till terminalen d\u00e4r du k\u00f6r OpenOCD s\u00e5 ska den ha printat ut lite mer. Info : accepting 'gdb' connection on tcp/3333 Info : nRF52840-xxAA(build code: F0) 1024kB Flash, 256kB RAM undefined debug reason 8 - target needs reset Warn : Prefer GDB command \"target extended-remote 3333\" instead of \"target remote 3333\" target halted due to debug-request, current mode: Thread xPSR: 0x01000000 pc: 0x00000100 msp: 0x20040000 target halted due to debug-request, current mode: Thread xPSR: 0x01000000 pc: 0x00000100 msp: 0x20040000 target halted due to debug-request, current mode: Thread xPSR: 0x01000000 pc: 0x00000100 msp: 0x20040000 D\u00e4r st\u00e5r det att en GDB instans har kopplat till servern och skickat \u00f6ver ett program som ska till devboardet. OpenOCD programmerar devboardet och startar programmet, tills devboardet kommer till en breakpoint. L\u00e4ngst ner i GDB terminalen ser du att det st\u00e5r (gdb) och att text som du skriver in i terminalen dyker upp d\u00e4r. Det syftar p\u00e5 att du \u00e4r i en GDB konsol, d\u00e4r du kan integrera med k\u00f6rningen av programmet. Vi ska nu testa att l\u00e4gga till en egen breakpoint och se om vi kan f\u00e5 enheten att stanna d\u00e4r. K\u00f6r f\u00f6ljande komandon i GDB konsollen L\u00e4gg till en breakpoint p\u00e5 rad 19 i programmet (p\u00e5 samma rad som rprintln) break 19 Starta om enheten s\u00e5 att det k\u00f6r fr\u00e5n b\u00f6rjan av programmet igen monitor reset init K\u00f6r programmet continue Nu b\u00f6r konsollen visa att du hamnat p\u00e5 en breakpoint p\u00e5 rad 19 Breakpoint 1, gdb_test::__cortex_m_rt_main () at src/main.rs:19 19 rprintln!(\"Hello, World!\"); Snyggt. Nu har du sj\u00e4lv laggt en breakpoint i programmet. Men fr\u00e5gan \u00e4r d\u00e5, hur ser vi vad som h\u00e4nder p\u00e5 enheten n\u00e4r den stannat? Det enklaste s\u00e4ttet \u00e4r att anv\u00e4nda GDBs \"grafiska\" l\u00e4ge som heter tui . Detta f\u00e5r man ig\u00e5ng igenom att skriva tui enable Nu b\u00f6r du f\u00e5 upp n\u00e5got som ser ut s\u00e5h\u00e4r H\u00e4r \u00e4r din kod. GDB markerar ocks\u00e5 vart n\u00e5gonstans som programmet har stannat. Du kan testa att be GDB k\u00f6ra en rad till och sedan stanna igen igenom att skriva next Nu b\u00f6r GDB markera n\u00e4sta rad i din mainfil. Testa nu att forts\u00e4tta k\u00f6ra programmet tills n\u00e4sta breakpoint continue Och du kommer tillbaks till exit funktionen. Vill du avsluda GDB kan du k\u00f6ra exit Den kommer att p\u00e5peka att programmet fortfarande k\u00f6rs, men l\u00e5ter dig avsluta om du trycker p\u00e5 y .","title":"F\u00f6rsta testet"},{"location":"sv/hardware/EmbeddedRust/#anvandning-av-gdb","text":"Tyv\u00e4rr \u00e4r GDB i sig sj\u00e4lv inte s\u00e5pass intuitivt att det \u00e4r enkelt att b\u00f6rja med. Man kan s\u00e4tta breakpoints och titta p\u00e5 variablers v\u00e4rden i GDB konsollen. Men anledningen till att jag inte g\u00e5r djupare i det \u00e4r f\u00f6r att vi senare ska koppla ihop GDB med VSCode, f\u00f6r att kunna integrera med GDB d\u00e4rifr\u00e5n. Det kommer att vara lite enklare, men jag menar att det kan vara v\u00e4rt g\u00e5 igenom hur hur GDB sj\u00e4lv funkar f\u00f6r att f\u00e5 en klarare bild \u00f6ver vad som sker i varje steg.","title":"Anv\u00e4ndning av GDB"},{"location":"sv/hardware/EmbeddedRust/#embedded-rust-i-vscode","text":"N\u00e4sta steg \u00e4r att konfigurera VSCode s\u00e5 vi enkelt kan bygga v\u00e5rt projekt och k\u00f6ra det. \u00d6ppna VSCode och \u00f6ppna projektet gdb_test ( File > Open Folder ). Till att b\u00f6rja med kan du g\u00e5 in i mappen src och \u00f6ppna mainfilen. Den kommer att ge dig ett par errors, men de kan du ignorera just nu. B\u00f6rja med att \u00f6ppna en ny terminal ( Terminal > New Terminal ) och k\u00f6r cargo run Det borde funka som tidigare. Den programerar ditt devboard och printar \"Hello, World!\". Vi vill dock kunna programera enheten med \"Run and Debug\" knappen i VSCode. F\u00f6rst beh\u00f6ver vi en SVD fil, som specificerar f\u00f6r OpenOCD hur den ska tolka specifika register p\u00e5 v\u00e5r enhet. Som tur \u00e4r har Nordic Semiconductors en SVD fil p\u00e5 Github. Klona deras nrfx repo i samma mapp som exempelna du gjort, och kopiera \u00f6ver filen nrfx/mdk/nrf52840.svd till mappen gdb_test . git clone git@github.com:NordicSemiconductor/nrfx.git cp nrfx/mdk/nrf52840.svd gdb_test Sen beh\u00f6ver vi ocks\u00e5 ett plugin till VSCode som heter Cortex-Debug . Installera det p\u00e5 samma s\u00e4tt som du installerade rust-analyzer . ElectroRules - VSCode Cortex-Debug Launch Configurations Nu ska du s\u00e4tta upp din launch.json fil. F\u00f6lj samma steg vi gjorde tidigare f\u00f6r att s\u00e4tta upp Run and Debug. Det ger dig en launch.json fil. Vi vill dock \u00e4ndra den s\u00e5 att ist\u00e4llet f\u00f6r att koden k\u00f6rs lokalt, k\u00f6rs den med GDB p\u00e5 embeddedenheten. Byt ut allt mellan m\u00e5svingarna fr\u00e5n { \"type\": \"lldb\", \"request\": \"launch\", \"name\": \"Debug\", \"program\": \"${workspaceFolder}/<executable file>\", \"args\": [], \"cwd\": \"${workspaceFolder}\" } Till { \"name\": \"Debug (OpenOCD)\", \"type\": \"cortex-debug\", \"request\": \"launch\", \"cwd\": \"${workspaceRoot}\", \"executable\": \"${workspaceFolder}/target/thumbv7em-none-eabi/debug/gdb_test\", \"servertype\": \"openocd\", \"runToEntryPoint\": \"main\", \"configFiles\": [\"debug_openocd.cfg\"], \"svdFile\": \"${workspaceFolder}/nrf52840.svd\" }","title":"Embedded Rust i VSCode"},{"location":"sv/music/","text":"","title":"Index"},{"location":"sv/music/RustSoundcard/","text":"Ljudkort i Rust","title":"Ljudkort i Rust"},{"location":"sv/music/RustSoundcard/#ljudkort-i-rust","text":"","title":"Ljudkort i Rust"},{"location":"sv/music/TheDONG/","text":"The DONG Jag har l\u00e4nge velat haft en bra fyrstr\u00e4ngad bas med lite proggit ton. N\u00e5got med mycket EQ kontroller och l\u00e4tt dist. En av mina favoritbasar har varit en av mina v\u00e4nners Dingwall NG ADAM \u201cNOLLY\u201d GETGOOD SIGNATURE . Den har ett riktigt tjockt ljud med fantastisk inbyggd dist som l\u00e5ter oerh\u00f6rt naturligt. H\u00e4r \u00e4r en bild p\u00e5 mig n\u00e4r jag spelar p\u00e5 den, med en kon p\u00e5 huvudet. Enda nackdelen med den modellen \u00e4r att den kostar 30 290 kr... Det \u00e4r n\u00e5got mer \u00e4n vad jag f\u00f6r tillf\u00e4llet har m\u00f6jlighet att l\u00e4gga p\u00e5 en bas. Min fundering var d\u00e4rf\u00f6r; kan jag bygga en bas som l\u00e5ter n\u00e5gorlunda likt en Dingwall, fast f\u00f6r ett l\u00e4gre pris? Mitt resonemang var f\u00f6ljande; Det som g\u00f6r en Dingwall NG ADAM \u201cNOLLY\u201d GETGOOD SIGNATURE nice att spela p\u00e5 \u00e4r. Dess extra l\u00e5nga str\u00e4ngar med fan frets f\u00f6r att f\u00f6rl\u00e4nga de l\u00e4gsta str\u00e4ngarna \u00e4nnu l\u00e4ngre. Dess extra str\u00e4ngbr\u00e4dd. En vanlig fem-/sexstr\u00e4ngad bas har en smalare str\u00e4ngbr\u00e4dd f\u00f6r att kunna ha en smalare hals. Men en Dingwall har (iallafall den femstr\u00e4ngade) samma str\u00e4ngbredd som en fyrstr\u00e4ngad bas, dvs 18mm. Tre av Dingwalls egna soapbar pickups. En Darkglass preamp. Str\u00e4ngl\u00e4ngd \u00e4r sv\u00e5rt att g\u00f6ra n\u00e5got \u00e5t p\u00e5 en billigare bas, s\u00e5 den faktorn f\u00e5r man leva med. Men str\u00e4ngbredd g\u00e5r enkelt att l\u00f6sa igenom att bara anv\u00e4nda en fyrstr\u00e4ngad bas. Det r\u00e5kade vara s\u00e5 att jag ville ha just en fyrstr\u00e4ngad, s\u00e5 det var inte ett problem. Jag vill g\u00e4rna ha en bas som kan g\u00e5 ner till ett l\u00e5gt D, d\u00e5 det \u00e4r den l\u00e4gsta tonen som jag sj\u00e4lv tycker l\u00e5ter bra att spela i de flesta sammanhang. Det \u00e4r bara tv\u00e5 halvsteg l\u00e4gre \u00e4n en vanlig fyrstr\u00e4ngad bas kan g\u00e5. D\u00e4rf\u00f6r \u00e4r min plan att st\u00e4mma hela basen tv\u00e5 halvsteg l\u00e4gre. Dingwalls pickups g\u00e5r inte att f\u00e5 tag p\u00e5 i \"normala\" formfaktorer. De \u00e4r gjorda just f\u00f6r Dingwalls str\u00e4ngbredd och f\u00f6r att kunna lutas. Men det r\u00e5kar vara s\u00e5 att en annan tillverkare vid namn Nordstrand Audio g\u00f6r en modell av pickups de kallar DINGSTRAND NORDWALL . Dessa \u00e4r soapbar pickups som \u00e4r gjorda f\u00f6r att efterlikna Dingwalls pickups, men i standard formfaktorer. Slutligen har vi preampen som sitter i Dingwallen. Det \u00e4r en Darkglass Tone Capsule som, d\u00e5 det inte \u00e4r Dingwalls egna preamp, ocks\u00e5 g\u00e5r att k\u00f6pa separat. Planen Min plan var d\u00e5 f\u00f6ljande. Hitta en fyrstr\u00e4ngad bas som har h\u00e5l f\u00f6r pickups nog stora f\u00f6r att kunna montera ett sett DINGSTRAND NORDWALL pickups i. K\u00f6p ett par av pickupsen och montera i basen K\u00f6p en Darkglass Tone Capsule och montera i basen. Byt str\u00e4ngarna till en gr\u00f6vre tjocklek f\u00f6r att kunna st\u00e4mma ner basen men beh\u00e5lla sp\u00e4nsten i dem. V\u00e4lj en bas F\u00f6r att l\u00e4tt kunna byta pickupsen till DINGSTRAND NORDWALL pickups, beh\u00f6ver vi en bas vars pickups \u00e4r av samma eller st\u00f6rre storlek. Standardisering \u00e4r dock inte n\u00e5got som appliceras p\u00e5 baspickups. \u00c4ven om pickups \u00e4r av samma typ betyder det tyv\u00e4rr inte att deras pickups \u00e4r i samma formfaktor/storlek. Som tur \u00e4r r\u00e5kar Nordstrand Audio vara en av f\u00e5 pickuptillverkare som tords skriva dimensionerna p\u00e5 sina pickups p\u00e5 deras sida. Varf\u00f6r detta inte tillh\u00f6r standarden f\u00f6r bastillverkare kan jag tyv\u00e4rr inte svara p\u00e5... DINGSTRAND NORDWALL kommer i tv\u00e5 modeller. En bredare som \u00e4r utformad efter en Bartolini BC och \u00e4r \\(101.35\\) bred och \\(32.6\\) mm h\u00f6g, samt en smalare modell som \u00e4r utformad efter en EMG 35 som \u00e4r \\(89.41\\) mm bred och \\(38.35\\) mm h\u00f6g. Jag hittade en bas som hade de pickups Nordstrands modeller var dimensionerade efter. Harley Benton TB-70 har ett par EMG35 pickups i sig. Den enda nackdelen \u00e4r dock att det \u00e4r en ganska ful bas... Min l\u00f6sning var dock ist\u00e4llet att kolla p\u00e5 ett antal basar vars pickups jag gissade var n\u00e4ra i storlek, och sedan maila Thomann och fr\u00e5ga om m\u00e5tten. Jag vill p\u00e5peka att Thomanns serviceavdelning \u00e4r utomordentliga och ska verkligen f\u00e5 ber\u00f6m f\u00f6r deras hj\u00e4lpsammet. Det h\u00e4r projektet hade inte g\u00e5tt att genomf\u00f6ra utan dem. D\u00e5 basar med soapbar pickups \u00e4r sv\u00e5ra att f\u00e5 tag p\u00e5 i de l\u00e4gre prisklasserna, valde jag ut ett antal basar med dubbla humbucker pickups, d\u00e5 dessa verkar st\u00e4mma b\u00e4st \u00f6verens rent storleksm\u00e4ssigt. Jag valde \u00e4ven n\u00e5gra femstr\u00e4ngade basar, d\u00e5 jag \u00e4nnu inte var s\u00e4ker p\u00e5 om jag ville ha fem eller fyrstr\u00e4ngat. F\u00f6ljande dimensioner p\u00e5 modeller fick jag fr\u00e5n Thomann. Ibanez SR300EB-WK - \\(99\\) mm x \\(33\\) mm. Ibanez SR305EB-WK - \\(107\\) mm x \\(33\\) mm. Yamaha TRBX 304 - \\(108\\) mm x \\(37.5\\) mm. Marcus Miller M2 TBK 2nd Gen - \\(101\\) mm x \\(37.5\\) mm Harley Benton B-450 Progressive Serie - \\(100\\) mm x \\(32\\) mm. Ett par millimeter f\u00f6r smala pickups skulle nog g\u00e5 alldeles utm\u00e4rkt, d\u00e5 h\u00e5len f\u00f6r pickupsen antagligen \u00e4r ca \\(1.5\\) mm bredare \u00e4n pickupsen p\u00e5 varje sida. I v\u00e4rsta fall skulle jag ocks\u00e5 kunna fila upp h\u00e5len en aning. Men jag beslutade mig tillslut f\u00f6r en Marcus Miller M2 TBK 2nd Gen , d\u00e5 den verkar ha ungef\u00e4r samma bredd p\u00e5 sina pickups, men aningen l\u00e4ngre. Det r\u00e5kar \u00e4ven vara den modellen jag personligen tycker ser b\u00e4st ut. Montera preamp Str\u00e4ngar Jag vill st\u00e4mma basen i D standard (DGCF). F\u00f6r att f\u00e5 till detta resonerade jag att jag skulle kunna k\u00f6pa de gr\u00f6vsta str\u00e4ngarna jag kunde hitta f\u00f6r 4 str\u00e4ngad bas, vilket var Daddario EPS230 str\u00e4ngar . De har en E str\u00e4ng som \u00e4r 0.110 tum tjock, vilket jag f\u00f6rst t\u00e4nkte skulle kunna st\u00e4mma till ett D. Men n\u00e4r jag st\u00e4mde ner str\u00e4ngarna till D standard, l\u00e4t allting skit. En hel del av klangen i str\u00e4ngarna f\u00f6rsvann, och de blev f\u00f6r l\u00f6sa f\u00f6r att kunna anv\u00e4nda med n\u00e5gon anv\u00e4ndbar str\u00e4ngh\u00f6jd. Men jag ins\u00e5g en sak; f\u00f6r min spelstil passar grova str\u00e4ngar ganska bra. Jag spelar ganska h\u00e5rt, och de grova str\u00e4ngarna gav mer sp\u00e4nst vilket jag gillar. Min n\u00e4sta teori var f\u00f6ljande. Kan jag ta ett s\u00e4tt l\u00e4tta 5 str\u00e4ngad bass str\u00e4ngar, och st\u00e4mma upp de l\u00e4gsta till D f\u00f6r att f\u00e5 samma sp\u00e4nst som i EPS230 str\u00e4ngarna? H\u00e4r \u00e4r en graf f\u00f6r vilken tjocklek Daddario str\u00e4ngarna har i relation till frekvensen av tonen den \u00e4r gjord f\u00f6r (bl\u00e5tt). Med hj\u00e4lp av en curve fit funktion kan vi f\u00e5 en ekvation som f\u00f6ljer de str\u00e4ngar jag har (gr\u00f6n). Sedan applicerar vi den funktionen p\u00e5 frekvenserna f\u00f6r D standard f\u00f6r att f\u00e5 ut de tjocklekar som passar dessa frekvenser (orange). Det h\u00e4r \u00e4r inte en perfekt analog f\u00f6r hur tjocka str\u00e4ngarna ska vara, d\u00e5 sp\u00e4nningen antagligen skiljer mellan olika str\u00e4ngar och m\u00e4rken. Men det optimala \u00e4r om vi hittar n\u00e5got likt Pro steel str\u00e4ngar med tjocklekarna \\(0.117\\) , \\(0.099\\) , \\(0.081\\) och \\(0.063\\) tum. Det finns ett antal set str\u00e4ngar p\u00e5 Thomann som passar. Du kan kolla igenom att g\u00e5 in p\u00e5 kategorin 040 5-String Electric Bass Strings och filtrera str\u00e4ngar med tjocklek 040 - 120 . Jag valde att testa ett sett som heter DR Strings Drop-Down Tuning DDT5-40 , som verkar vara gjorda precis f\u00f6r det jag f\u00f6rs\u00f6ker \u00e5stadkomma. F\u00f6rdelen med dessa str\u00e4ngar \u00e4r att de verkar vara gjorda f\u00f6r att droppa i st\u00e4mning, s\u00e5 om min ide om att st\u00e4mma upp B, E, A och D str\u00e4ngarna funkar, kan jag bara anv\u00e4nda E, A, D och G str\u00e4ngarna och st\u00e4mma ner. Kostnad F\u00f6ljande delar beh\u00f6vde jag k\u00f6pa. Del Produkt Pris Bas Marcus Miller M2 TBK 2nd Gen 4 077 kr Preamp Darkglass Tone Capsule 1 999 kr Str\u00e4ngar Daddario EPS230 str\u00e4ngar 319 kr Summa 6 395 kr","title":"The DONG"},{"location":"sv/music/TheDONG/#the-dong","text":"Jag har l\u00e4nge velat haft en bra fyrstr\u00e4ngad bas med lite proggit ton. N\u00e5got med mycket EQ kontroller och l\u00e4tt dist. En av mina favoritbasar har varit en av mina v\u00e4nners Dingwall NG ADAM \u201cNOLLY\u201d GETGOOD SIGNATURE . Den har ett riktigt tjockt ljud med fantastisk inbyggd dist som l\u00e5ter oerh\u00f6rt naturligt. H\u00e4r \u00e4r en bild p\u00e5 mig n\u00e4r jag spelar p\u00e5 den, med en kon p\u00e5 huvudet. Enda nackdelen med den modellen \u00e4r att den kostar 30 290 kr... Det \u00e4r n\u00e5got mer \u00e4n vad jag f\u00f6r tillf\u00e4llet har m\u00f6jlighet att l\u00e4gga p\u00e5 en bas. Min fundering var d\u00e4rf\u00f6r; kan jag bygga en bas som l\u00e5ter n\u00e5gorlunda likt en Dingwall, fast f\u00f6r ett l\u00e4gre pris? Mitt resonemang var f\u00f6ljande; Det som g\u00f6r en Dingwall NG ADAM \u201cNOLLY\u201d GETGOOD SIGNATURE nice att spela p\u00e5 \u00e4r. Dess extra l\u00e5nga str\u00e4ngar med fan frets f\u00f6r att f\u00f6rl\u00e4nga de l\u00e4gsta str\u00e4ngarna \u00e4nnu l\u00e4ngre. Dess extra str\u00e4ngbr\u00e4dd. En vanlig fem-/sexstr\u00e4ngad bas har en smalare str\u00e4ngbr\u00e4dd f\u00f6r att kunna ha en smalare hals. Men en Dingwall har (iallafall den femstr\u00e4ngade) samma str\u00e4ngbredd som en fyrstr\u00e4ngad bas, dvs 18mm. Tre av Dingwalls egna soapbar pickups. En Darkglass preamp. Str\u00e4ngl\u00e4ngd \u00e4r sv\u00e5rt att g\u00f6ra n\u00e5got \u00e5t p\u00e5 en billigare bas, s\u00e5 den faktorn f\u00e5r man leva med. Men str\u00e4ngbredd g\u00e5r enkelt att l\u00f6sa igenom att bara anv\u00e4nda en fyrstr\u00e4ngad bas. Det r\u00e5kade vara s\u00e5 att jag ville ha just en fyrstr\u00e4ngad, s\u00e5 det var inte ett problem. Jag vill g\u00e4rna ha en bas som kan g\u00e5 ner till ett l\u00e5gt D, d\u00e5 det \u00e4r den l\u00e4gsta tonen som jag sj\u00e4lv tycker l\u00e5ter bra att spela i de flesta sammanhang. Det \u00e4r bara tv\u00e5 halvsteg l\u00e4gre \u00e4n en vanlig fyrstr\u00e4ngad bas kan g\u00e5. D\u00e4rf\u00f6r \u00e4r min plan att st\u00e4mma hela basen tv\u00e5 halvsteg l\u00e4gre. Dingwalls pickups g\u00e5r inte att f\u00e5 tag p\u00e5 i \"normala\" formfaktorer. De \u00e4r gjorda just f\u00f6r Dingwalls str\u00e4ngbredd och f\u00f6r att kunna lutas. Men det r\u00e5kar vara s\u00e5 att en annan tillverkare vid namn Nordstrand Audio g\u00f6r en modell av pickups de kallar DINGSTRAND NORDWALL . Dessa \u00e4r soapbar pickups som \u00e4r gjorda f\u00f6r att efterlikna Dingwalls pickups, men i standard formfaktorer. Slutligen har vi preampen som sitter i Dingwallen. Det \u00e4r en Darkglass Tone Capsule som, d\u00e5 det inte \u00e4r Dingwalls egna preamp, ocks\u00e5 g\u00e5r att k\u00f6pa separat.","title":"The DONG"},{"location":"sv/music/TheDONG/#planen","text":"Min plan var d\u00e5 f\u00f6ljande. Hitta en fyrstr\u00e4ngad bas som har h\u00e5l f\u00f6r pickups nog stora f\u00f6r att kunna montera ett sett DINGSTRAND NORDWALL pickups i. K\u00f6p ett par av pickupsen och montera i basen K\u00f6p en Darkglass Tone Capsule och montera i basen. Byt str\u00e4ngarna till en gr\u00f6vre tjocklek f\u00f6r att kunna st\u00e4mma ner basen men beh\u00e5lla sp\u00e4nsten i dem.","title":"Planen"},{"location":"sv/music/TheDONG/#valj-en-bas","text":"F\u00f6r att l\u00e4tt kunna byta pickupsen till DINGSTRAND NORDWALL pickups, beh\u00f6ver vi en bas vars pickups \u00e4r av samma eller st\u00f6rre storlek. Standardisering \u00e4r dock inte n\u00e5got som appliceras p\u00e5 baspickups. \u00c4ven om pickups \u00e4r av samma typ betyder det tyv\u00e4rr inte att deras pickups \u00e4r i samma formfaktor/storlek. Som tur \u00e4r r\u00e5kar Nordstrand Audio vara en av f\u00e5 pickuptillverkare som tords skriva dimensionerna p\u00e5 sina pickups p\u00e5 deras sida. Varf\u00f6r detta inte tillh\u00f6r standarden f\u00f6r bastillverkare kan jag tyv\u00e4rr inte svara p\u00e5... DINGSTRAND NORDWALL kommer i tv\u00e5 modeller. En bredare som \u00e4r utformad efter en Bartolini BC och \u00e4r \\(101.35\\) bred och \\(32.6\\) mm h\u00f6g, samt en smalare modell som \u00e4r utformad efter en EMG 35 som \u00e4r \\(89.41\\) mm bred och \\(38.35\\) mm h\u00f6g. Jag hittade en bas som hade de pickups Nordstrands modeller var dimensionerade efter. Harley Benton TB-70 har ett par EMG35 pickups i sig. Den enda nackdelen \u00e4r dock att det \u00e4r en ganska ful bas... Min l\u00f6sning var dock ist\u00e4llet att kolla p\u00e5 ett antal basar vars pickups jag gissade var n\u00e4ra i storlek, och sedan maila Thomann och fr\u00e5ga om m\u00e5tten. Jag vill p\u00e5peka att Thomanns serviceavdelning \u00e4r utomordentliga och ska verkligen f\u00e5 ber\u00f6m f\u00f6r deras hj\u00e4lpsammet. Det h\u00e4r projektet hade inte g\u00e5tt att genomf\u00f6ra utan dem. D\u00e5 basar med soapbar pickups \u00e4r sv\u00e5ra att f\u00e5 tag p\u00e5 i de l\u00e4gre prisklasserna, valde jag ut ett antal basar med dubbla humbucker pickups, d\u00e5 dessa verkar st\u00e4mma b\u00e4st \u00f6verens rent storleksm\u00e4ssigt. Jag valde \u00e4ven n\u00e5gra femstr\u00e4ngade basar, d\u00e5 jag \u00e4nnu inte var s\u00e4ker p\u00e5 om jag ville ha fem eller fyrstr\u00e4ngat. F\u00f6ljande dimensioner p\u00e5 modeller fick jag fr\u00e5n Thomann. Ibanez SR300EB-WK - \\(99\\) mm x \\(33\\) mm. Ibanez SR305EB-WK - \\(107\\) mm x \\(33\\) mm. Yamaha TRBX 304 - \\(108\\) mm x \\(37.5\\) mm. Marcus Miller M2 TBK 2nd Gen - \\(101\\) mm x \\(37.5\\) mm Harley Benton B-450 Progressive Serie - \\(100\\) mm x \\(32\\) mm. Ett par millimeter f\u00f6r smala pickups skulle nog g\u00e5 alldeles utm\u00e4rkt, d\u00e5 h\u00e5len f\u00f6r pickupsen antagligen \u00e4r ca \\(1.5\\) mm bredare \u00e4n pickupsen p\u00e5 varje sida. I v\u00e4rsta fall skulle jag ocks\u00e5 kunna fila upp h\u00e5len en aning. Men jag beslutade mig tillslut f\u00f6r en Marcus Miller M2 TBK 2nd Gen , d\u00e5 den verkar ha ungef\u00e4r samma bredd p\u00e5 sina pickups, men aningen l\u00e4ngre. Det r\u00e5kar \u00e4ven vara den modellen jag personligen tycker ser b\u00e4st ut.","title":"V\u00e4lj en bas"},{"location":"sv/music/TheDONG/#montera-preamp","text":"","title":"Montera preamp"},{"location":"sv/music/TheDONG/#strangar","text":"Jag vill st\u00e4mma basen i D standard (DGCF). F\u00f6r att f\u00e5 till detta resonerade jag att jag skulle kunna k\u00f6pa de gr\u00f6vsta str\u00e4ngarna jag kunde hitta f\u00f6r 4 str\u00e4ngad bas, vilket var Daddario EPS230 str\u00e4ngar . De har en E str\u00e4ng som \u00e4r 0.110 tum tjock, vilket jag f\u00f6rst t\u00e4nkte skulle kunna st\u00e4mma till ett D. Men n\u00e4r jag st\u00e4mde ner str\u00e4ngarna till D standard, l\u00e4t allting skit. En hel del av klangen i str\u00e4ngarna f\u00f6rsvann, och de blev f\u00f6r l\u00f6sa f\u00f6r att kunna anv\u00e4nda med n\u00e5gon anv\u00e4ndbar str\u00e4ngh\u00f6jd. Men jag ins\u00e5g en sak; f\u00f6r min spelstil passar grova str\u00e4ngar ganska bra. Jag spelar ganska h\u00e5rt, och de grova str\u00e4ngarna gav mer sp\u00e4nst vilket jag gillar. Min n\u00e4sta teori var f\u00f6ljande. Kan jag ta ett s\u00e4tt l\u00e4tta 5 str\u00e4ngad bass str\u00e4ngar, och st\u00e4mma upp de l\u00e4gsta till D f\u00f6r att f\u00e5 samma sp\u00e4nst som i EPS230 str\u00e4ngarna? H\u00e4r \u00e4r en graf f\u00f6r vilken tjocklek Daddario str\u00e4ngarna har i relation till frekvensen av tonen den \u00e4r gjord f\u00f6r (bl\u00e5tt). Med hj\u00e4lp av en curve fit funktion kan vi f\u00e5 en ekvation som f\u00f6ljer de str\u00e4ngar jag har (gr\u00f6n). Sedan applicerar vi den funktionen p\u00e5 frekvenserna f\u00f6r D standard f\u00f6r att f\u00e5 ut de tjocklekar som passar dessa frekvenser (orange). Det h\u00e4r \u00e4r inte en perfekt analog f\u00f6r hur tjocka str\u00e4ngarna ska vara, d\u00e5 sp\u00e4nningen antagligen skiljer mellan olika str\u00e4ngar och m\u00e4rken. Men det optimala \u00e4r om vi hittar n\u00e5got likt Pro steel str\u00e4ngar med tjocklekarna \\(0.117\\) , \\(0.099\\) , \\(0.081\\) och \\(0.063\\) tum. Det finns ett antal set str\u00e4ngar p\u00e5 Thomann som passar. Du kan kolla igenom att g\u00e5 in p\u00e5 kategorin 040 5-String Electric Bass Strings och filtrera str\u00e4ngar med tjocklek 040 - 120 . Jag valde att testa ett sett som heter DR Strings Drop-Down Tuning DDT5-40 , som verkar vara gjorda precis f\u00f6r det jag f\u00f6rs\u00f6ker \u00e5stadkomma. F\u00f6rdelen med dessa str\u00e4ngar \u00e4r att de verkar vara gjorda f\u00f6r att droppa i st\u00e4mning, s\u00e5 om min ide om att st\u00e4mma upp B, E, A och D str\u00e4ngarna funkar, kan jag bara anv\u00e4nda E, A, D och G str\u00e4ngarna och st\u00e4mma ner.","title":"Str\u00e4ngar"},{"location":"sv/music/TheDONG/#kostnad","text":"F\u00f6ljande delar beh\u00f6vde jag k\u00f6pa. Del Produkt Pris Bas Marcus Miller M2 TBK 2nd Gen 4 077 kr Preamp Darkglass Tone Capsule 1 999 kr Str\u00e4ngar Daddario EPS230 str\u00e4ngar 319 kr Summa 6 395 kr","title":"Kostnad"},{"location":"sv/music/test/","text":"test","title":"test"},{"location":"sv/music/test/#test","text":"","title":"test"},{"location":"sv/music/test2/","text":"test2","title":"test2"},{"location":"sv/music/test2/#test2","text":"","title":"test2"},{"location":"sv/software/","text":"","title":"Index"},{"location":"sv/software/HomebreweryCoCTheme/","text":"Homebrewery Call of Cthulhu Tema Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Et odio pellentesque diam volutpat commodo sed. Erat pellentesque adipiscing commodo elit at imperdiet dui accumsan sit. Varius morbi enim nunc faucibus. Volutpat sed cras ornare arcu. In iaculis nunc sed augue lacus. Mattis aliquam faucibus purus in massa. Mollis aliquam ut porttitor leo a diam. Nulla aliquet porttitor lacus luctus. In pellentesque massa placerat duis ultricies lacus. Fringilla phasellus faucibus scelerisque eleifend donec pretium vulputate sapien nec. Nascetur ridiculus mus mauris vitae ultricies leo integer malesuada. Leo vel fringilla est ullamcorper. In vitae turpis massa sed elementum tempus egestas. Sagittis nisl rhoncus mattis rhoncus urna neque. Potenti nullam ac tortor vitae. Tellus integer feugiat scelerisque varius morbi enim nunc. Aenean vel elit scelerisque mauris pellentesque pulvinar pellentesque habitant. Pellentesque diam volutpat commodo sed egestas egestas. Quis eleifend quam adipiscing vitae proin. Porttitor rhoncus dolor purus non. Tincidunt ornare massa eget egestas purus. Ultrices vitae auctor eu augue. Risus pretium quam vulputate dignissim suspendisse in est ante. Pellentesque id nibh tortor id. Nunc sed augue lacus viverra vitae congue eu consequat. Volutpat est velit egestas dui id. Interdum posuere lorem ipsum dolor. Morbi tristique senectus et netus et. Sed enim ut sem viverra aliquet. Pretium lectus quam id leo. Consequat id porta nibh venenatis cras sed felis eget velit. Urna id volutpat lacus laoreet. In nibh mauris cursus mattis molestie a iaculis. Imperdiet massa tincidunt nunc pulvinar sapien et ligula. Sagittis vitae et leo duis ut. Adipiscing bibendum est ultricies integer quis auctor elit sed. Mattis nunc sed blandit libero volutpat sed cras ornare arcu. Arcu non odio euismod lacinia at quis. Viverra tellus in hac habitasse platea dictumst vestibulum rhoncus. Et pharetra pharetra massa massa ultricies. Cursus eget nunc scelerisque viverra mauris in aliquam. Nunc mattis enim ut tellus elementum sagittis vitae et leo. Tellus molestie nunc non blandit massa enim. Justo eget magna fermentum iaculis eu non diam phasellus. Enim tortor at auctor urna nunc id cursus metus. Ac felis donec et odio pellentesque diam. Ipsum suspendisse ultrices gravida dictum. Dui nunc mattis enim ut tellus elementum sagittis vitae. Amet commodo nulla facilisi nullam vehicula. Rhoncus mattis rhoncus urna neque. Ut ornare lectus sit amet est placerat in egestas erat. Diam quam nulla porttitor massa id neque aliquam vestibulum morbi. Facilisi cras fermentum odio eu feugiat pretium. Blandit massa enim nec dui nunc mattis enim ut tellus. Elementum sagittis vitae et leo duis. Eu facilisis sed odio morbi quis. Sit amet tellus cras adipiscing enim eu turpis egestas. Dolor purus non enim praesent elementum facilisis leo vel. Sit amet purus gravida quis blandit turpis cursus in. Varius quam quisque id diam. Orci a scelerisque purus semper eget duis at tellus. Justo donec enim diam vulputate ut pharetra sit. Id neque aliquam vestibulum morbi blandit cursus risus. Sagittis orci a scelerisque purus semper. Laoreet sit amet cursus sit amet dictum sit amet justo. Nec feugiat in fermentum posuere urna nec tincidunt praesent. Massa eget egestas purus viverra. In nisl nisi scelerisque eu ultrices vitae auctor eu augue. Posuere sollicitudin aliquam ultrices sagittis orci a scelerisque. Condimentum vitae sapien pellentesque habitant morbi tristique senectus et netus. In est ante in nibh mauris cursus mattis. At tellus at urna condimentum mattis pellentesque. Rhoncus mattis rhoncus urna neque viverra justo. Turpis egestas maecenas pharetra convallis posuere morbi. Ac turpis egestas maecenas pharetra convallis posuere morbi. Non arcu risus quis varius quam. Sit amet purus gravida quis blandit turpis cursus. Sed euismod nisi porta lorem mollis aliquam ut. Congue nisi vitae suscipit tellus mauris a. Sit amet nulla facilisi morbi. Ac odio tempor orci dapibus ultrices in iaculis nunc. Ultricies tristique nulla aliquet enim tortor at auctor urna. Parturient montes nascetur ridiculus mus. Pretium lectus quam id leo in vitae. Mattis aliquam faucibus purus in. Habitant morbi tristique senectus et. Consequat ac felis donec et odio pellentesque diam volutpat. Semper auctor neque vitae tempus quam pellentesque nec nam. Volutpat diam ut venenatis tellus in metus vulputate eu. A cras semper auctor neque vitae tempus quam pellentesque. Velit euismod in pellentesque massa placerat duis ultricies. Sed sed risus pretium quam vulputate dignissim. Mattis aliquam faucibus purus in massa tempor nec feugiat. Egestas integer eget aliquet nibh praesent tristique. Egestas diam in arcu cursus euismod. Pellentesque massa placerat duis ultricies. Viverra orci sagittis eu volutpat. Auctor neque vitae tempus quam pellentesque. Purus semper eget duis at tellus at urna condimentum mattis. At urna condimentum mattis pellentesque id nibh tortor. Suspendisse in est ante in nibh mauris cursus. Nisl nisi scelerisque eu ultrices vitae auctor. Ut tortor pretium viverra suspendisse potenti. Pharetra vel turpis nunc eget lorem dolor. Amet commodo nulla facilisi nullam vehicula ipsum a arcu. Vulputate sapien nec sagittis aliquam malesuada bibendum. Ultrices tincidunt arcu non sodales neque sodales ut etiam sit. Tristique nulla aliquet enim tortor. Elit ullamcorper dignissim cras tincidunt lobortis feugiat vivamus at. Lorem donec massa sapien faucibus. Scelerisque felis imperdiet proin fermentum leo. Nulla aliquet enim tortor at. Lacus vel facilisis volutpat est velit egestas dui id. Turpis egestas integer eget aliquet nibh praesent tristique magna sit. Nisl nunc mi ipsum faucibus vitae. Pretium aenean pharetra magna ac placerat. Dictum varius duis at consectetur lorem donec massa sapien faucibus. Sed libero enim sed faucibus turpis in. Sollicitudin tempor id eu nisl nunc mi ipsum faucibus vitae. Blandit volutpat maecenas volutpat blandit. Aliquam sem et tortor consequat id porta. Fermentum odio eu feugiat pretium nibh. Laoreet suspendisse interdum consectetur libero id faucibus nisl tincidunt eget. Laoreet sit amet cursus sit amet dictum sit amet justo. Purus viverra accumsan in nisl nisi scelerisque eu ultrices. Id semper risus in hendrerit gravida rutrum. Ornare aenean euismod elementum nisi quis eleifend quam. Maecenas sed enim ut sem viverra. Leo integer malesuada nunc vel risus commodo viverra maecenas. Mattis pellentesque id nibh tortor id aliquet lectus proin. Blandit aliquam etiam erat velit scelerisque in dictum non. Quam pellentesque nec nam aliquam. Ut lectus arcu bibendum at varius vel pharetra. Consectetur lorem donec massa sapien faucibus. Nullam vehicula ipsum a arcu cursus vitae. At ultrices mi tempus imperdiet nulla malesuada. Pulvinar pellentesque habitant morbi tristique. Vel pretium lectus quam id leo. Integer enim neque volutpat ac. Condimentum mattis pellentesque id nibh tortor id aliquet lectus. Tristique magna sit amet purus gravida. Amet cursus sit amet dictum sit amet justo donec enim. Velit aliquet sagittis id consectetur purus ut faucibus. Ipsum suspendisse ultrices gravida dictum fusce ut placerat orci. Aliquam ut porttitor leo a diam sollicitudin tempor id eu. Elementum pulvinar etiam non quam lacus suspendisse. Vitae aliquet nec ullamcorper sit amet risus nullam eget. Venenatis lectus magna fringilla urna porttitor rhoncus dolor purus. Blandit cursus risus at ultrices mi. Auctor neque vitae tempus quam pellentesque nec nam aliquam. Tristique risus nec feugiat in fermentum posuere urna nec tincidunt. A arcu cursus vitae congue mauris rhoncus aenean. Arcu ac tortor dignissim convallis aenean et tortor at risus. Cras tincidunt lobortis feugiat vivamus at augue eget arcu dictum. Enim lobortis scelerisque fermentum dui faucibus in ornare quam. Eget duis at tellus at. Etiam tempor orci eu lobortis elementum nibh. Lorem ipsum dolor sit amet consectetur adipiscing elit pellentesque. Tortor aliquam nulla facilisi cras fermentum odio eu feugiat. Tincidunt tortor aliquam nulla facilisi cras fermentum odio eu. Tincidunt augue interdum velit euismod in pellentesque massa placerat duis. Accumsan tortor posuere ac ut consequat semper viverra nam. Ante in nibh mauris cursus mattis molestie a iaculis at. Vivamus at augue eget arcu dictum. Penatibus et magnis dis parturient montes nascetur ridiculus mus. Gravida arcu ac tortor dignissim convallis aenean et tortor at. In mollis nunc sed id semper risus in hendrerit gravida. Ut lectus arcu bibendum at varius. Tristique magna sit amet purus. Lectus urna duis convallis convallis tellus id interdum velit. Est sit amet facilisis magna. Lectus sit amet est placerat in egestas. Sit amet est placerat in egestas erat. Cras adipiscing enim eu turpis. Mattis nunc sed blandit libero volutpat sed cras. Orci dapibus ultrices in iaculis nunc sed. Mi eget mauris pharetra et ultrices neque ornare. Lacinia quis vel eros donec ac odio. Diam vulputate ut pharetra sit amet aliquam id diam. Faucibus interdum posuere lorem ipsum dolor. Cum sociis natoque penatibus et. Eget arcu dictum varius duis at consectetur lorem donec. Vel risus commodo viverra maecenas accumsan lacus vel. Viverra nam libero justo laoreet sit amet cursus sit amet. Lorem ipsum dolor sit amet consectetur adipiscing elit pellentesque habitant. Netus et malesuada fames ac. Ut tortor pretium viverra suspendisse potenti nullam ac. Pellentesque habitant morbi tristique senectus et netus et malesuada fames. Libero id faucibus nisl tincidunt eget nullam. Quis imperdiet massa tincidunt nunc pulvinar sapien et. Elit eget gravida cum sociis natoque penatibus et. Turpis in eu mi bibendum neque egestas congue quisque egestas. Etiam tempor orci eu lobortis elementum. Urna condimentum mattis pellentesque id nibh. Consectetur adipiscing elit pellentesque habitant morbi. Pellentesque nec nam aliquam sem et tortor consequat id porta. Mauris cursus mattis molestie a iaculis at erat. Neque gravida in fermentum et sollicitudin ac. Sit amet justo donec enim diam vulputate ut. Nullam non nisi est sit amet facilisis. Euismod elementum nisi quis eleifend quam adipiscing. Gravida rutrum quisque non tellus. Interdum varius sit amet mattis. Lectus magna fringilla urna porttitor rhoncus dolor. Sed elementum tempus egestas sed. Nullam eget felis eget nunc lobortis. Imperdiet dui accumsan sit amet nulla facilisi morbi tempus. Eros donec ac odio tempor orci dapibus. Pulvinar pellentesque habitant morbi tristique. Bibendum ut tristique et egestas quis ipsum suspendisse ultrices gravida. Nulla facilisi etiam dignissim diam quis enim. Massa eget egestas purus viverra accumsan in nisl. Volutpat maecenas volutpat blandit aliquam etiam. Eget duis at tellus at. Vestibulum rhoncus est pellentesque elit ullamcorper dignissim cras tincidunt. Nibh ipsum consequat nisl vel pretium lectus quam. Vitae turpis massa sed elementum tempus egestas. Sit amet massa vitae tortor condimentum lacinia. Interdum posuere lorem ipsum dolor sit amet. Ac feugiat sed lectus vestibulum. Tempus iaculis urna id volutpat lacus laoreet non. Blandit aliquam etiam erat velit. In fermentum et sollicitudin ac. Bibendum neque egestas congue quisque egestas diam. Sed euismod nisi porta lorem mollis aliquam. Tempus egestas sed sed risus pretium quam vulputate. Vitae aliquet nec ullamcorper sit amet risus nullam. Mi tempus imperdiet nulla malesuada pellentesque elit eget gravida cum. Rhoncus mattis rhoncus urna neque. Est ante in nibh mauris cursus. Et sollicitudin ac orci phasellus egestas. Diam volutpat commodo sed egestas egestas fringilla phasellus faucibus scelerisque. Ante metus dictum at tempor commodo ullamcorper. Risus feugiat in ante metus dictum at tempor. Lacus sed turpis tincidunt id aliquet risus feugiat in ante. Malesuada fames ac turpis egestas. Id cursus metus aliquam eleifend mi in nulla posuere sollicitudin. Sed felis eget velit aliquet sagittis. Elit eget gravida cum sociis natoque penatibus et. Neque sodales ut etiam sit amet nisl purus in mollis. Molestie at elementum eu facilisis sed odio morbi quis. Euismod quis viverra nibh cras pulvinar mattis nunc. Duis tristique sollicitudin nibh sit amet commodo nulla facilisi. Ut faucibus pulvinar elementum integer enim neque volutpat. Massa id neque aliquam vestibulum morbi blandit. Fringilla urna porttitor rhoncus dolor purus non enim praesent elementum. Massa tincidunt dui ut ornare lectus sit amet est. Senectus et netus et malesuada fames ac turpis. Rutrum tellus pellentesque eu tincidunt tortor aliquam. Nec ullamcorper sit amet risus nullam eget felis. Tincidunt arcu non sodales neque sodales. Dui vivamus arcu felis bibendum ut tristique et egestas quis. Tortor consequat id porta nibh venenatis cras sed felis eget. Consequat mauris nunc congue nisi vitae suscipit tellus. Sed ullamcorper morbi tincidunt ornare massa eget egestas purus. Consequat mauris nunc congue nisi vitae. Odio pellentesque diam volutpat commodo sed egestas egestas fringilla. Volutpat blandit aliquam etiam erat velit scelerisque in dictum non. Pulvinar pellentesque habitant morbi tristique senectus et netus et. Lectus arcu bibendum at varius. Mauris in aliquam sem fringilla ut morbi tincidunt. Sit amet consectetur adipiscing elit duis tristique sollicitudin nibh. Condimentum vitae sapien pellentesque habitant morbi. Consequat interdum varius sit amet mattis vulputate enim nulla aliquet. Tempus iaculis urna id volutpat lacus laoreet non. Ac turpis egestas maecenas pharetra convallis posuere morbi leo urna. Quisque non tellus orci ac auctor augue. Aliquet porttitor lacus luctus accumsan tortor posuere. Maecenas volutpat blandit aliquam etiam erat velit scelerisque in. Feugiat nibh sed pulvinar proin. Id ornare arcu odio ut sem nulla pharetra diam. Venenatis cras sed felis eget velit. Et malesuada fames ac turpis egestas integer eget aliquet nibh. Sed egestas egestas fringilla phasellus faucibus scelerisque eleifend. Iaculis at erat pellentesque adipiscing commodo. Consequat nisl vel pretium lectus quam id leo in. Elementum facilisis leo vel fringilla est. Massa sed elementum tempus egestas sed sed risus pretium. Tincidunt praesent semper feugiat nibh sed pulvinar proin gravida. Phasellus vestibulum lorem sed risus ultricies tristique nulla aliquet enim. Elit duis tristique sollicitudin nibh sit amet commodo nulla. Purus sit amet luctus venenatis lectus magna fringilla. Pharetra pharetra massa massa ultricies. Quisque egestas diam in arcu cursus. Ac orci phasellus egestas tellus. Sociis natoque penatibus et magnis. Et egestas quis ipsum suspendisse ultrices gravida dictum fusce. Eget magna fermentum iaculis eu non diam phasellus vestibulum lorem. Pellentesque elit eget gravida cum sociis natoque penatibus et magnis. Accumsan sit amet nulla facilisi morbi tempus. Odio facilisis mauris sit amet massa vitae tortor condimentum. Enim ut tellus elementum sagittis vitae et leo. Facilisis magna etiam tempor orci eu lobortis elementum nibh. Tempus iaculis urna id volutpat lacus laoreet non curabitur gravida. Sed faucibus turpis in eu mi bibendum. Venenatis urna cursus eget nunc scelerisque. Praesent semper feugiat nibh sed. Nulla aliquet enim tortor at auctor. Donec adipiscing tristique risus nec feugiat in fermentum posuere urna. Sagittis vitae et leo duis ut diam quam nulla porttitor. Auctor urna nunc id cursus metus aliquam eleifend mi. Nullam non nisi est sit amet facilisis magna. Scelerisque eleifend donec pretium vulputate sapien nec sagittis. Purus gravida quis blandit turpis cursus in. Placerat in egestas erat imperdiet sed. Nisl nunc mi ipsum faucibus vitae. Dui faucibus in ornare quam viverra orci sagittis. Ultrices tincidunt arcu non sodales neque sodales. Neque viverra justo nec ultrices dui sapien. Malesuada fames ac turpis egestas sed tempus urna et pharetra. Varius vel pharetra vel turpis nunc eget lorem. Mi proin sed libero enim. Risus nec feugiat in fermentum posuere urna. Dignissim diam quis enim lobortis scelerisque. Sem nulla pharetra diam sit amet nisl. Ullamcorper malesuada proin libero nunc consequat. Hendrerit gravida rutrum quisque non tellus. Sit amet justo donec enim diam vulputate ut. Cras semper auctor neque vitae tempus quam. Ultrices neque ornare aenean euismod elementum nisi quis eleifend. Vitae tortor condimentum lacinia quis vel eros donec.","title":"Homebrewery Call of Cthulhu Tema"},{"location":"sv/software/HomebreweryCoCTheme/#homebrewery-call-of-cthulhu-tema","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Et odio pellentesque diam volutpat commodo sed. Erat pellentesque adipiscing commodo elit at imperdiet dui accumsan sit. Varius morbi enim nunc faucibus. Volutpat sed cras ornare arcu. In iaculis nunc sed augue lacus. Mattis aliquam faucibus purus in massa. Mollis aliquam ut porttitor leo a diam. Nulla aliquet porttitor lacus luctus. In pellentesque massa placerat duis ultricies lacus. Fringilla phasellus faucibus scelerisque eleifend donec pretium vulputate sapien nec. Nascetur ridiculus mus mauris vitae ultricies leo integer malesuada. Leo vel fringilla est ullamcorper. In vitae turpis massa sed elementum tempus egestas.","title":"Homebrewery Call of Cthulhu Tema"},{"location":"sv/software/HomebreweryCoCTheme/#sagittis-nisl-rhoncus","text":"mattis rhoncus urna neque. Potenti nullam ac tortor vitae. Tellus integer feugiat scelerisque varius morbi enim nunc. Aenean vel elit scelerisque mauris pellentesque pulvinar pellentesque habitant. Pellentesque diam volutpat commodo sed egestas egestas. Quis eleifend quam adipiscing vitae proin. Porttitor rhoncus dolor purus non. Tincidunt ornare massa eget egestas purus. Ultrices vitae auctor eu augue. Risus pretium quam vulputate dignissim suspendisse in est ante. Pellentesque id nibh tortor id. Nunc sed augue lacus viverra vitae congue eu consequat. Volutpat est velit egestas dui id. Interdum posuere lorem ipsum dolor. Morbi tristique senectus et netus et. Sed enim ut sem viverra aliquet. Pretium lectus quam id leo. Consequat id porta nibh venenatis cras sed felis eget velit. Urna id volutpat lacus laoreet. In nibh mauris cursus mattis molestie a iaculis. Imperdiet massa tincidunt nunc pulvinar sapien et ligula. Sagittis vitae et leo duis ut. Adipiscing bibendum est ultricies integer quis auctor elit sed. Mattis nunc sed blandit libero volutpat sed cras ornare arcu. Arcu non odio euismod lacinia at quis. Viverra tellus in hac habitasse platea dictumst vestibulum rhoncus. Et pharetra pharetra massa massa ultricies. Cursus eget nunc scelerisque viverra mauris in aliquam. Nunc mattis enim ut tellus elementum sagittis vitae et leo. Tellus molestie nunc non blandit massa enim. Justo eget magna fermentum iaculis eu non diam phasellus. Enim tortor at auctor urna nunc id cursus metus. Ac felis donec et odio pellentesque diam. Ipsum suspendisse ultrices gravida dictum. Dui nunc mattis enim ut tellus elementum sagittis vitae. Amet commodo nulla facilisi nullam vehicula. Rhoncus mattis rhoncus urna neque. Ut ornare lectus sit amet est placerat in egestas erat.","title":"Sagittis nisl rhoncus"},{"location":"sv/software/HomebreweryCoCTheme/#diam-quam","text":"nulla porttitor massa id neque aliquam vestibulum morbi. Facilisi cras fermentum odio eu feugiat pretium. Blandit massa enim nec dui nunc mattis enim ut tellus. Elementum sagittis vitae et leo duis. Eu facilisis sed odio morbi quis. Sit amet tellus cras adipiscing enim eu turpis egestas. Dolor purus non enim praesent elementum facilisis leo vel. Sit amet purus gravida quis blandit turpis cursus in. Varius quam quisque id diam. Orci a scelerisque purus semper eget duis at tellus. Justo donec enim diam vulputate ut pharetra sit. Id neque aliquam vestibulum morbi blandit cursus risus. Sagittis orci a scelerisque purus semper. Laoreet sit amet cursus sit amet dictum sit amet justo. Nec feugiat in fermentum posuere urna nec tincidunt praesent. Massa eget egestas purus viverra. In nisl nisi scelerisque eu ultrices vitae auctor eu augue. Posuere sollicitudin aliquam ultrices sagittis orci a scelerisque. Condimentum vitae sapien pellentesque habitant morbi tristique senectus et netus. In est ante in nibh mauris cursus mattis. At tellus at urna condimentum mattis pellentesque. Rhoncus mattis rhoncus urna neque viverra justo. Turpis egestas maecenas pharetra convallis posuere morbi. Ac turpis egestas maecenas pharetra convallis posuere morbi.","title":"Diam quam"},{"location":"sv/software/HomebreweryCoCTheme/#non-arcu-risus","text":"quis varius quam. Sit amet purus gravida quis blandit turpis cursus. Sed euismod nisi porta lorem mollis aliquam ut. Congue nisi vitae suscipit tellus mauris a. Sit amet nulla facilisi morbi. Ac odio tempor orci dapibus ultrices in iaculis nunc. Ultricies tristique nulla aliquet enim tortor at auctor urna. Parturient montes nascetur ridiculus mus. Pretium lectus quam id leo in vitae. Mattis aliquam faucibus purus in. Habitant morbi tristique senectus et. Consequat ac felis donec et odio pellentesque diam volutpat. Semper auctor neque vitae tempus quam pellentesque nec nam. Volutpat diam ut venenatis tellus in metus vulputate eu. A cras semper auctor neque vitae tempus quam pellentesque.","title":"Non arcu risus"},{"location":"sv/software/HomebreweryCoCTheme/#velit-euismod","text":"in pellentesque massa placerat duis ultricies. Sed sed risus pretium quam vulputate dignissim. Mattis aliquam faucibus purus in massa tempor nec feugiat. Egestas integer eget aliquet nibh praesent tristique. Egestas diam in arcu cursus euismod. Pellentesque massa placerat duis ultricies. Viverra orci sagittis eu volutpat. Auctor neque vitae tempus quam pellentesque. Purus semper eget duis at tellus at urna condimentum mattis. At urna condimentum mattis pellentesque id nibh tortor. Suspendisse in est ante in nibh mauris cursus. Nisl nisi scelerisque eu ultrices vitae auctor. Ut tortor pretium viverra suspendisse potenti. Pharetra vel turpis nunc eget lorem dolor. Amet commodo nulla facilisi nullam vehicula ipsum a arcu. Vulputate sapien nec sagittis aliquam malesuada bibendum.","title":"Velit euismod"},{"location":"sv/software/HomebreweryCoCTheme/#ultrices-tincidunt","text":"arcu non sodales neque sodales ut etiam sit. Tristique nulla aliquet enim tortor. Elit ullamcorper dignissim cras tincidunt lobortis feugiat vivamus at. Lorem donec massa sapien faucibus. Scelerisque felis imperdiet proin fermentum leo. Nulla aliquet enim tortor at. Lacus vel facilisis volutpat est velit egestas dui id. Turpis egestas integer eget aliquet nibh praesent tristique magna sit. Nisl nunc mi ipsum faucibus vitae. Pretium aenean pharetra magna ac placerat. Dictum varius duis at consectetur lorem donec massa sapien faucibus. Sed libero enim sed faucibus turpis in. Sollicitudin tempor id eu nisl nunc mi ipsum faucibus vitae. Blandit volutpat maecenas volutpat blandit.","title":"Ultrices tincidunt"},{"location":"sv/software/HomebreweryCoCTheme/#aliquam","text":"sem et tortor consequat id porta. Fermentum odio eu feugiat pretium nibh. Laoreet suspendisse interdum consectetur libero id faucibus nisl tincidunt eget. Laoreet sit amet cursus sit amet dictum sit amet justo. Purus viverra accumsan in nisl nisi scelerisque eu ultrices. Id semper risus in hendrerit gravida rutrum. Ornare aenean euismod elementum nisi quis eleifend quam. Maecenas sed enim ut sem viverra. Leo integer malesuada nunc vel risus commodo viverra maecenas. Mattis pellentesque id nibh tortor id aliquet lectus proin. Blandit aliquam etiam erat velit scelerisque in dictum non. Quam pellentesque nec nam aliquam. Ut lectus arcu bibendum at varius vel pharetra. Consectetur lorem donec massa sapien faucibus. Nullam vehicula ipsum a arcu cursus vitae. At ultrices mi tempus imperdiet nulla malesuada. Pulvinar pellentesque habitant morbi tristique. Vel pretium lectus quam id leo. Integer enim neque volutpat ac. Condimentum mattis pellentesque id nibh tortor id aliquet lectus.","title":"Aliquam"},{"location":"sv/software/HomebreweryCoCTheme/#tristique","text":"magna sit amet purus gravida. Amet cursus sit amet dictum sit amet justo donec enim. Velit aliquet sagittis id consectetur purus ut faucibus. Ipsum suspendisse ultrices gravida dictum fusce ut placerat orci. Aliquam ut porttitor leo a diam sollicitudin tempor id eu. Elementum pulvinar etiam non quam lacus suspendisse. Vitae aliquet nec ullamcorper sit amet risus nullam eget. Venenatis lectus magna fringilla urna porttitor rhoncus dolor purus. Blandit cursus risus at ultrices mi. Auctor neque vitae tempus quam pellentesque nec nam aliquam. Tristique risus nec feugiat in fermentum posuere urna nec tincidunt. A arcu cursus vitae congue mauris rhoncus aenean. Arcu ac tortor dignissim convallis aenean et tortor at risus. Cras tincidunt lobortis feugiat vivamus at augue eget arcu dictum. Enim lobortis scelerisque fermentum dui faucibus in ornare quam. Eget duis at tellus at. Etiam tempor orci eu lobortis elementum nibh. Lorem ipsum dolor sit amet consectetur adipiscing elit pellentesque. Tortor aliquam nulla facilisi cras fermentum odio eu feugiat. Tincidunt tortor aliquam nulla facilisi cras fermentum odio eu. Tincidunt augue interdum velit euismod in pellentesque massa placerat duis. Accumsan tortor posuere ac ut consequat semper viverra nam. Ante in nibh mauris cursus mattis molestie a iaculis at. Vivamus at augue eget arcu dictum. Penatibus et magnis dis parturient montes nascetur ridiculus mus. Gravida arcu ac tortor dignissim convallis aenean et tortor at. In mollis nunc sed id semper risus in hendrerit gravida. Ut lectus arcu bibendum at varius. Tristique magna sit amet purus.","title":"Tristique"},{"location":"sv/software/HomebreweryCoCTheme/#lectus-urna","text":"duis convallis convallis tellus id interdum velit. Est sit amet facilisis magna. Lectus sit amet est placerat in egestas. Sit amet est placerat in egestas erat. Cras adipiscing enim eu turpis. Mattis nunc sed blandit libero volutpat sed cras. Orci dapibus ultrices in iaculis nunc sed. Mi eget mauris pharetra et ultrices neque ornare. Lacinia quis vel eros donec ac odio. Diam vulputate ut pharetra sit amet aliquam id diam. Faucibus interdum posuere lorem ipsum dolor. Cum sociis natoque penatibus et. Eget arcu dictum varius duis at consectetur lorem donec. Vel risus commodo viverra maecenas accumsan lacus vel.","title":"Lectus urna"},{"location":"sv/software/HomebreweryCoCTheme/#viverra-nam","text":"libero justo laoreet sit amet cursus sit amet. Lorem ipsum dolor sit amet consectetur adipiscing elit pellentesque habitant. Netus et malesuada fames ac. Ut tortor pretium viverra suspendisse potenti nullam ac. Pellentesque habitant morbi tristique senectus et netus et malesuada fames. Libero id faucibus nisl tincidunt eget nullam. Quis imperdiet massa tincidunt nunc pulvinar sapien et. Elit eget gravida cum sociis natoque penatibus et. Turpis in eu mi bibendum neque egestas congue quisque egestas. Etiam tempor orci eu lobortis elementum. Urna condimentum mattis pellentesque id nibh. Consectetur adipiscing elit pellentesque habitant morbi. Pellentesque nec nam aliquam sem et tortor consequat id porta. Mauris cursus mattis molestie a iaculis at erat. Neque gravida in fermentum et sollicitudin ac. Sit amet justo donec enim diam vulputate ut. Nullam non nisi est sit amet facilisis. Euismod elementum nisi quis eleifend quam adipiscing. Gravida rutrum quisque non tellus. Interdum varius sit amet mattis.","title":"Viverra nam"},{"location":"sv/software/HomebreweryCoCTheme/#lectus-magna","text":"fringilla urna porttitor rhoncus dolor. Sed elementum tempus egestas sed. Nullam eget felis eget nunc lobortis. Imperdiet dui accumsan sit amet nulla facilisi morbi tempus. Eros donec ac odio tempor orci dapibus. Pulvinar pellentesque habitant morbi tristique. Bibendum ut tristique et egestas quis ipsum suspendisse ultrices gravida. Nulla facilisi etiam dignissim diam quis enim. Massa eget egestas purus viverra accumsan in nisl. Volutpat maecenas volutpat blandit aliquam etiam. Eget duis at tellus at. Vestibulum rhoncus est pellentesque elit ullamcorper dignissim cras tincidunt. Nibh ipsum consequat nisl vel pretium lectus quam. Vitae turpis massa sed elementum tempus egestas. Sit amet massa vitae tortor condimentum lacinia. Interdum posuere lorem ipsum dolor sit amet.","title":"Lectus magna"},{"location":"sv/software/HomebreweryCoCTheme/#ac-feugiat","text":"sed lectus vestibulum. Tempus iaculis urna id volutpat lacus laoreet non. Blandit aliquam etiam erat velit. In fermentum et sollicitudin ac. Bibendum neque egestas congue quisque egestas diam. Sed euismod nisi porta lorem mollis aliquam. Tempus egestas sed sed risus pretium quam vulputate. Vitae aliquet nec ullamcorper sit amet risus nullam. Mi tempus imperdiet nulla malesuada pellentesque elit eget gravida cum. Rhoncus mattis rhoncus urna neque. Est ante in nibh mauris cursus. Et sollicitudin ac orci phasellus egestas. Diam volutpat commodo sed egestas egestas fringilla phasellus faucibus scelerisque. Ante metus dictum at tempor commodo ullamcorper. Risus feugiat in ante metus dictum at tempor. Lacus sed turpis tincidunt id aliquet risus feugiat in ante. Malesuada fames ac turpis egestas. Id cursus metus aliquam eleifend mi in nulla posuere sollicitudin. Sed felis eget velit aliquet sagittis. Elit eget gravida cum sociis natoque penatibus et.","title":"Ac feugiat"},{"location":"sv/software/HomebreweryCoCTheme/#neque-sodales","text":"ut etiam sit amet nisl purus in mollis. Molestie at elementum eu facilisis sed odio morbi quis. Euismod quis viverra nibh cras pulvinar mattis nunc. Duis tristique sollicitudin nibh sit amet commodo nulla facilisi. Ut faucibus pulvinar elementum integer enim neque volutpat. Massa id neque aliquam vestibulum morbi blandit. Fringilla urna porttitor rhoncus dolor purus non enim praesent elementum. Massa tincidunt dui ut ornare lectus sit amet est. Senectus et netus et malesuada fames ac turpis. Rutrum tellus pellentesque eu tincidunt tortor aliquam. Nec ullamcorper sit amet risus nullam eget felis. Tincidunt arcu non sodales neque sodales. Dui vivamus arcu felis bibendum ut tristique et egestas quis. Tortor consequat id porta nibh venenatis cras sed felis eget.","title":"Neque sodales"},{"location":"sv/software/HomebreweryCoCTheme/#consequat-mauris","text":"nunc congue nisi vitae suscipit tellus. Sed ullamcorper morbi tincidunt ornare massa eget egestas purus. Consequat mauris nunc congue nisi vitae. Odio pellentesque diam volutpat commodo sed egestas egestas fringilla. Volutpat blandit aliquam etiam erat velit scelerisque in dictum non. Pulvinar pellentesque habitant morbi tristique senectus et netus et. Lectus arcu bibendum at varius. Mauris in aliquam sem fringilla ut morbi tincidunt. Sit amet consectetur adipiscing elit duis tristique sollicitudin nibh. Condimentum vitae sapien pellentesque habitant morbi. Consequat interdum varius sit amet mattis vulputate enim nulla aliquet. Tempus iaculis urna id volutpat lacus laoreet non. Ac turpis egestas maecenas pharetra convallis posuere morbi leo urna. Quisque non tellus orci ac auctor augue. Aliquet porttitor lacus luctus accumsan tortor posuere. Maecenas volutpat blandit aliquam etiam erat velit scelerisque in. Feugiat nibh sed pulvinar proin. Id ornare arcu odio ut sem nulla pharetra diam.","title":"Consequat mauris"},{"location":"sv/software/HomebreweryCoCTheme/#venenatis-cras-sed","text":"felis eget velit. Et malesuada fames ac turpis egestas integer eget aliquet nibh. Sed egestas egestas fringilla phasellus faucibus scelerisque eleifend. Iaculis at erat pellentesque adipiscing commodo. Consequat nisl vel pretium lectus quam id leo in. Elementum facilisis leo vel fringilla est. Massa sed elementum tempus egestas sed sed risus pretium. Tincidunt praesent semper feugiat nibh sed pulvinar proin gravida. Phasellus vestibulum lorem sed risus ultricies tristique nulla aliquet enim. Elit duis tristique sollicitudin nibh sit amet commodo nulla. Purus sit amet luctus venenatis lectus magna fringilla. Pharetra pharetra massa massa ultricies. Quisque egestas diam in arcu cursus. Ac orci phasellus egestas tellus. Sociis natoque penatibus et magnis. Et egestas quis ipsum suspendisse ultrices gravida dictum fusce. Eget magna fermentum iaculis eu non diam phasellus vestibulum lorem. Pellentesque elit eget gravida cum sociis natoque penatibus et magnis. Accumsan sit amet nulla facilisi morbi tempus.","title":"Venenatis cras sed"},{"location":"sv/software/HomebreweryCoCTheme/#odio","text":"facilisis mauris sit amet massa vitae tortor condimentum. Enim ut tellus elementum sagittis vitae et leo. Facilisis magna etiam tempor orci eu lobortis elementum nibh. Tempus iaculis urna id volutpat lacus laoreet non curabitur gravida. Sed faucibus turpis in eu mi bibendum. Venenatis urna cursus eget nunc scelerisque. Praesent semper feugiat nibh sed. Nulla aliquet enim tortor at auctor. Donec adipiscing tristique risus nec feugiat in fermentum posuere urna. Sagittis vitae et leo duis ut diam quam nulla porttitor. Auctor urna nunc id cursus metus aliquam eleifend mi. Nullam non nisi est sit amet facilisis magna. Scelerisque eleifend donec pretium vulputate sapien nec sagittis. Purus gravida quis blandit turpis cursus in. Placerat in egestas erat imperdiet sed. Nisl nunc mi ipsum faucibus vitae.","title":"Odio"},{"location":"sv/software/HomebreweryCoCTheme/#dui-faucibus","text":"in ornare quam viverra orci sagittis. Ultrices tincidunt arcu non sodales neque sodales. Neque viverra justo nec ultrices dui sapien. Malesuada fames ac turpis egestas sed tempus urna et pharetra. Varius vel pharetra vel turpis nunc eget lorem. Mi proin sed libero enim. Risus nec feugiat in fermentum posuere urna. Dignissim diam quis enim lobortis scelerisque. Sem nulla pharetra diam sit amet nisl. Ullamcorper malesuada proin libero nunc consequat. Hendrerit gravida rutrum quisque non tellus. Sit amet justo donec enim diam vulputate ut. Cras semper auctor neque vitae tempus quam. Ultrices neque ornare aenean euismod elementum nisi quis eleifend. Vitae tortor condimentum lacinia quis vel eros donec.","title":"Dui faucibus"},{"location":"sv/software/UtbultDesignSite/","text":"Utbult Design site Sidan du \u00e4r p\u00e5 nu har jag gjort. Den bygger p\u00e5 MkDocs med ett tema som jag gjort specifikt f\u00f6r sidan. Temat kallar jag Utbult-Design-Theme . I min mening \u00e4r en bra sida en som inte \u00e4r mer komplicerad \u00e4n vad den beh\u00f6ver vara . Man kan absolut g\u00f6ra sidan enklare \u00e4n hur jag gjort den, men jag menar att sidan ligger p\u00e5 en bra niv\u00e5 av komplexitet. Plugins och Extensions I grunden har vi MkDocs. Jag anv\u00e4nder, f\u00f6rutom temat, dessa plugins och extensions f\u00f6r att f\u00e5 allt som jag vill. Tutorial Jag g\u00f6r en liten tutorial","title":"Utbult Design site"},{"location":"sv/software/UtbultDesignSite/#utbult-design-site","text":"Sidan du \u00e4r p\u00e5 nu har jag gjort. Den bygger p\u00e5 MkDocs med ett tema som jag gjort specifikt f\u00f6r sidan. Temat kallar jag Utbult-Design-Theme . I min mening \u00e4r en bra sida en som inte \u00e4r mer komplicerad \u00e4n vad den beh\u00f6ver vara . Man kan absolut g\u00f6ra sidan enklare \u00e4n hur jag gjort den, men jag menar att sidan ligger p\u00e5 en bra niv\u00e5 av komplexitet.","title":"Utbult Design site"},{"location":"sv/software/UtbultDesignSite/#plugins-och-extensions","text":"I grunden har vi MkDocs. Jag anv\u00e4nder, f\u00f6rutom temat, dessa plugins och extensions f\u00f6r att f\u00e5 allt som jag vill.","title":"Plugins och Extensions"},{"location":"sv/software/UtbultDesignSite/#tutorial","text":"Jag g\u00f6r en liten tutorial","title":"Tutorial"}]}